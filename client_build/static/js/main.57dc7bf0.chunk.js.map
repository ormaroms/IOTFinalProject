{"version":3,"sources":["logo.svg","reducers/status.js","reducers/app.js","reducers/login.js","reducers/arduionsList.js","reducers/statusHistory.js","reducers/statisticsChart.js","reducers/index.js","components/CurrentStatus/CurrentStatus.css.js","history.js","components/CurrentStatus/CurrentStatus.js","serverapi/index.js","containers/StatusContainer.js","actions/status.js","components/Register/Register.css.js","components/Register/Register.js","containers/RegisterContainer.js","actions/register.js","components/Login/Login.css.js","components/Login/Login.js","containers/LoginContainer.js","actions/login.js","components/ArduinosList/ArduionsList.css.js","components/ArduinosList/ArduionsList.js","actions/arduionsList.js","containers/ArduionsListContainer.js","components/StatisticsChart/StatisticsChart.css.js","components/StatisticsChart/StatisticsChart.js","containers/StatisticsChartContainer.js","actions/statisticsChart.js","components/StatusHistory/StatusHistory.css.js","components/StatusHistory/StatusHistory.js","containers/StatusHistoryContainer.js","actions/statusHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","defaultState","lightStatus","gasStatus","arduinoID","token","localStorage","getItem","user_id","combineReducers","status","state","arguments","length","undefined","action","type","Object","assign","data","arduionsList","errorMsg","error","arduinoId","app","setItem","_id","login","statusHistory","statisticsChart","styles","theme","root","objectSpread","mixins","gutters","paddingBottom","spacing","unit","height","width","paddingRight","paddingLeft","rowForIndicators","display","header","paddingTop","backgroundColor","color","title","fontSize","fontWeight","date","marginBottom","textAlign","marginLeft","fontFamily","inidcatorSection","marginTop","formControl","margin","createBrowserHistory","CurrentStatus","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","currentTime","_this2","getStatus","days","months","setInterval","Date","setState","getDay","getDate","getMonth","getFullYear","toLocaleTimeString","_this$props","classes","history","push","react_default","a","createElement","react","key","index_es","className","elevation","AppBar_default","position","component","Info_default","control","checked","value","label","labelPlacement","Button","style","href","textDecoration","Component","withStyles","SERVER","getStatusHistory","id","axios","get","headers","authorization","Content-Type","connect","ownProps","match","params","dispatch","userId","console","log","then","res","currArduinoStatus","filter","catch","err","text","field","Register","handleSubmit","bind","assertThisInitialized","e","preventDefault","userName","password","email","name","test","String","toLowerCase","register","onSubmit","Grid_default","item","xs","variant","inputRef","el","ref","button","post","username","signUp","cursor","Login","nextProps","onClick","routeToRegister","response","message","addButton","marginRight","tableRows","maxHeight","overflowY","addDeviceTitle","float","ArduionsList","handleRouteToStatus","resetStatus","updateAdruinoId","handleAddRow","arduinoName","isNaN","addNewDevice","formElement","target","handleDeleteRow","deviceIdToDelete","deleteDevice","devices","isDialogOpen","getUserDevices","reset","logout","ExitToApp_default","Timelapse_default","routeToStatusHistory","BarChart_default","routeToStatistics","Add_default","table","overflow","tableLayout","map","device","hover","scope","Delete_default","Dialog_default","open","onClose","handleCloseDialog","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","placeholder","autoFocus","fullWidth","DialogActions_default","deviceActionSucceeded","newDeviceId","newDeviceName","deviceToDelete","delete","updateDevice","deviceToUpdateId","deviceNewName","put","chart","tabs","loader","options","hAxis","vAxis","viewWindow","min","max","legend","StatisticsChart","tabIndex","isLoading","getStatistics","lightOptions","gasOptions","react_loader_spinner_default","esm","selectedIndex","onSelect","index_esm","chartType","chartData","weekStart","setDate","daysInWeek","lightCounter","gasCounter","allStatuses","forEach","userArduinoStatuses","concat","statusTime","time","i","datTemp","shift","lightCountTemp","gasCountTemp","gasOption","role","lightOption","getChartArray","StatusHistory","handleExpand","newExpandedRows","toConsumableArray","expandedRows","idxFound","allExpanded","findIndex","splice","isExpanded","find","expandAll","getRows","deviceHistory","rows","firstRow","detailRow","colSpan","toString","getTable","devicesRow","devicesHistory","filteredDevices","currentDevice","currentHistory","filterByGasAndLight","store","createStore","reducers","subscribe","getState","createMuiTheme","typography","App","core_styles","es","react_router","path","exact","LoginContainer","RegisterContainer","StatusContainer","ArduionsListContainer","StatisticsChartContainer","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57dc7bf0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","\r\n\r\nconst defaultState = {\r\n    lightStatus: false,\r\n    gasStatus: false,\r\n    arduinoID: \"1\",\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"STATUS_DATA_FETCHED\":\r\n            return Object.assign({}, action.data)\r\n        case \"STATUS_RESET\":\r\n            return Object.assign({})\r\n        default: return state\r\n    }\r\n}\r\n\r\n","const defaultState = {\r\n    token: localStorage.getItem('TOKEN'),\r\n    user_id: localStorage.getItem('USER_ID')\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"LOGIN_SUCCEEDED\":\r\n            localStorage.setItem('TOKEN', action.data.token);\r\n            localStorage.setItem('USER_ID', action.data._id);\r\n            return Object.assign({}, {user_id: action.data._id, token: action.data.token})\r\n        case \"LOGOUT\":\r\n            localStorage.setItem('TOKEN', undefined);\r\n            return Object.assign({}, {token: undefined})\r\n        default: return state\r\n    }\r\n}\r\n\r\n","const defaultState = {\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"LOGIN_FAILED\":\r\n            return Object.assign({},  {errorMsg: action.error})\r\n        case \"LOGIN_SUCCEEDED\":\r\n            return Object.assign({}, action.data)\r\n        default: return state\r\n    }\r\n}","\r\n\r\nconst defaultState = {\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"ARDUIONS_LIST_LOADED\":\r\n            return Object.assign({}, action.data)\r\n        case \"DEVICE_ACTION_SUCCEEDED\":\r\n            return Object.assign({}, action.data)\r\n        case \"DEVICE_ADDITION_FIELD\":\r\n            return Object.assign({}, {errorMsg: action.error})\r\n        case \"UPDATE_ARDUINO_ID\":\r\n            return Object.assign({}, {arduinoId: action.data})\r\n        default: return state\r\n    }\r\n}\r\n\r\n","\r\n\r\nconst defaultState = {\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"STATUS_HISTORY_DATA_FETCHED\":\r\n            return Object.assign({}, action.data)\r\n        default: return state\r\n    }\r\n}\r\n\r\n","const defaultState = {\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"STATISTICS_DATA_FETCHED\":\r\n            return Object.assign({}, action.data)\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport status from './status'\r\nimport app from './app'\r\nimport login from './login'\r\nimport arduionsList from './arduionsList'\r\nimport statusHistory from './statusHistory'\r\nimport statisticsChart from './statisticsChart'\r\n\r\n\r\nexport default combineReducers({status,arduionsList, app, login,statusHistory, statisticsChart})","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '450px',\r\n        width: '85% ',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    rowForIndicators:{\r\n        display:\"-webkit-box\"\r\n    },\r\n    header: {\r\n      paddingTop: '10px',\r\n      backgroundColor: 'cornflowerblue',\r\n      color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    date:{\r\n        fontSize:\"18px\",\r\n        marginBottom: \"20px\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    arduinoID:{\r\n        fontSize:\"16px\",\r\n        color:\"#a28b8b\",\r\n        textAlign:\"left\",\r\n        marginLeft: \"30px\",\r\n        fontFamily: \"Montserrat\"\r\n    },\r\n    inidcatorSection:{\r\n        marginTop: \"20px\"\r\n    },\r\n        formControl: {\r\n            margin: theme.spacing.unit * 3,\r\n        },\r\n    \r\n    \r\n});\r\nexport default styles;","// history.js\r\nimport { createBrowserHistory } from 'history'\r\n\r\nexport default createBrowserHistory({\r\n    /* pass a configuration object here if needed */\r\n})","import React, { Component, Fragment } from 'react';\r\nimport {Paper,Switch, Radio,FormControl,FormLabel,FormControlLabel,FormGroup,Checkbox, Typography,FormHelperText } from '@material-ui/core';\r\nimport styles from './CurrentStatus.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Info from '@material-ui/icons/Info';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport history from '../../history'\r\nimport Button from \"@material-ui/core/es/Button/Button\";\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass CurrentStatus extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {currentTime: ''};\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getStatus(this.props.token, this.props.user_id, this.props.arduinoId);\r\n\r\n        var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        setInterval( () => {\r\n            var date = new Date();\r\n            this.setState({\r\n                currentTime : days[date.getDay()] + \", \" + date.getDate() + ' ' + months[date.getMonth()] +\r\n                    ' ' + date.getFullYear() + ', ' + date.toLocaleTimeString()\r\n            })\r\n        },1000)\r\n\r\n        setInterval(() => {\r\n            this.props.getStatus(this.props.token, this.props.user_id, this.props.arduinoId);\r\n        }, 10000)\r\n    }\r\n\r\n    render() {\r\n        const {lightStatus, gasStatus, arduinoId, classes} = this.props;\r\n\r\n        if (this.props.token === undefined || this.props.token === null || this.props.token === \"\") {\r\n            history.push('/')\r\n            return (<div></div>)\r\n        }\r\n        \r\n        return (\r\n            \r\n            <Fragment key={this.props.arduinoId}>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                            <Typography className={classes.title}>\r\n                                Current Status\r\n                            </Typography>\r\n                            <Typography className={classes.date}>\r\n                                { this.state.currentTime }\r\n                            </Typography>\r\n\r\n                    </AppBar>\r\n\r\n                    <p className={classes.arduinoID}>\r\n                        <b> Device Id: </b> {arduinoId} {gasStatus} {lightStatus}\r\n                    </p>\r\n\r\n\r\n                    <FormControl className={classes.inidcatorSection} component=\"fieldset\">\r\n                        <FormLabel component=\"legend\"> <Info/> Indicators</FormLabel>\r\n                        <FormGroup>\r\n\r\n\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Switch\r\n                                        checked={gasStatus || false}\r\n                                        value=\"Leaking\"\r\n                                    />\r\n                                }\r\n                                label=\"Gas Leaking \"\r\n                                labelPlacement=\"start\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Switch\r\n                                        checked={lightStatus || false}\r\n                                        value=\"Lit\"\r\n                                    />\r\n                                }\r\n                                label=\"Gas Lit \"\r\n                                labelPlacement=\"start\"\r\n                            />\r\n\r\n\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                    {\r\n                        (!lightStatus && gasStatus) && (\r\n                        <div>\r\n                        <Button style={{color: 'red'}}>\r\n                            <a href=\"tel:102\" style={{color: 'red', textDecoration: 'none'}}>\r\n                            Call Fire department!\r\n                            </a>\r\n                        </Button>\r\n                        </div>\r\n                        )\r\n                    }\r\n                </Paper>\r\n            </Fragment>\r\n\r\n   \r\n        );\r\n    }\r\n}\r\n\r\nexport default  withStyles(styles)(CurrentStatus);\r\n","import axios from 'axios'\r\n\r\nconst SERVER = 'https://iot-gas-monitor.herokuapp.com'\r\n\r\nexport function getStatus(token, id) {\r\n    return axios.get(SERVER + '/status/' + id)//, {params: {token, id}})\r\n}\r\n\r\nexport function getUserDevices(token, id) { // The id need to be here\r\n    return axios.get(SERVER + '/devices/' + id, {\r\n        headers: {\r\n            'authorization' : 'Bearer '+token,\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    })\r\n}\r\nexport function getStatusHistory(token, id) {\r\n    debugger// The id need to be here\r\n    return axios.get(SERVER + '/status/getArduinoHistory/' + id, {\r\n        headers: {\r\n            'authorization' : 'Bearer '+token,\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport function addNewDevice(token, id, newDeviceId, newDeviceName) { // TODO: insert token\r\n    return axios.post(SERVER + '/devices/' + id, {\r\n        \"id\": newDeviceId,\r\n        \"name\": newDeviceName\r\n    }, {\r\n        headers: {\r\n            'authorization' : 'Bearer ' + token,\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\nexport function deleteDevice(token, id, deviceToDelete) { // TODO: insert token\r\n    return axios.delete(SERVER + '/devices/' + id,  {\r\n        headers: {\r\n            'authorization' : 'Bearer ' + token,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data: {\r\n            'arduinoId': deviceToDelete\r\n        }\r\n    })\r\n}\r\n\r\nexport function updateDevice(token, deviceToUpdateId, deviceNewName) { // TODO: insert token\r\n    return axios.put(SERVER + '/devices/' + '5caba627e4b63200044dc316', {\r\n        \"id\": deviceToUpdateId,\r\n        \"name\": deviceNewName\r\n    }, {\r\n        headers: {\r\n            'authorization' : 'Bearer ' + token,\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\nexport function login(userName, password)\r\n{\r\n    return axios.post(SERVER + '/users/authenticate', {\r\n        \"username\": userName,\r\n        \"password\": password\r\n    }, {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\n export function register(userName, password, name, email)\r\n {\r\n     return axios.post(SERVER + '/users/register', {\r\n         \"username\": userName,\r\n         \"password\": password,\r\n         \"name\": name,\r\n         \"email\": email\r\n     }, {\r\n     headers: {\r\n         'Content-Type': 'application/json'\r\n     }\r\n })\r\n }\r\n","import { connect } from 'react-redux'\r\nimport CurrentStatus from '../components/CurrentStatus/CurrentStatus'\r\nimport {statusDataFetched} from '../actions/status'\r\nimport {getStatus} from '../serverapi/'\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        token: state.app.token,\r\n        user_id: state.app.user_id,\r\n        arduinoId: ownProps.match.params.id,\r\n        ...state.status,\r\n        ...state.login,\r\n        ...state.arduionsList\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        getStatus: (token, userId, arduinoId) => {\r\n            console.log(\"Asked status for \" + arduinoId + \" arduino\");\r\n            getStatus(token, userId).then(res => {\r\n               let currArduinoStatus =\r\n                   res.data.filter(function(status){return status.id == arduinoId});\r\n\r\n                if (currArduinoStatus.length > 0) {\r\n                    console.log(\"Status data fetched for arduino \"+ arduinoId)\r\n                    dispatch(statusDataFetched(currArduinoStatus[0]))\r\n                } else {\r\n                    console.log(\"Couldnt find status for arduino \"+ arduinoId)\r\n                }\r\n\r\n            }).catch(err => {\r\n                console.error(\"Status data fetched failed\")\r\n                console.error(err)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentStatus)","\r\n\r\nexport function statusDataFetched(data) {\r\n    return { type: \"STATUS_DATA_FETCHED\" , data: data }\r\n}\r\n\r\nexport function resetStatus() {\r\n    return { type: \"STATUS_RESET\"}\r\n}","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '450px',\r\n        width: '85% ',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    text:{\r\n        fontSize:\"16px\",\r\n        color:\"black\",\r\n        // fontFamily: \"Montserrat\"\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n        fontSize: \"18px\",\r\n        margin: \"5px\"\r\n    },\r\n    field: {\r\n        margin: \"5px\"\r\n    }\r\n});\r\nexport default styles;","import React, { Component, Fragment } from 'react';\r\nimport styles from './Register.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Button, TextField, FormControl, FormLabel, Paper, Typography} from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass Register extends Component {\r\n\r\n\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {errorMsg: \"\"};\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n\r\n        let userName = this.userName.value;\r\n        let password = this.password.value;\r\n        let email = this.email.value;\r\n        let name = this.name.value;\r\n        var emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n        if (userName == '' || password == '' || email == '' || name == '' ) {\r\n            this.setState({errorMsg: \"Field can not be empty\"})\r\n        } else if (!emailRegex.test(String(email).toLowerCase())) {\r\n            this.setState({errorMsg: \"Email adress is not valid\"})\r\n        }\r\n        else {\r\n            this.props.register(this.userName.value, this.password.value, this.name.value, this.email.value);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                        <Typography className={classes.title}>\r\n                            Register\r\n                        </Typography>\r\n                    </AppBar>\r\n\r\n                    <div className=\"Login\">\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"name\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Name\"\r\n                                    inputRef={el => this.name = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"email\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Email\"\r\n                                    inputRef={el => this.email = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"userName\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"User Name\"\r\n                                    inputRef={el => this.userName = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField ref='password'\r\n                                           type=\"password\"\r\n                                           variant=\"outlined\"\r\n                                           inputRef={el => this.password = el}\r\n                                           label=\"Password\"/>\r\n                            </Grid>\r\n\r\n                            <p className={classes.error}>{this.state.errorMsg}</p>\r\n\r\n                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                                Create account\r\n                            </Button>\r\n                        </form>\r\n                    </div>\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Register);\r\n","import { connect } from 'react-redux'\r\nimport Register from '../components/Register/Register'\r\nimport {register} from \"../serverapi\";\r\nimport {RegisterSuccceeded, RegisterFailed} from \"../actions/register\";\r\nimport history from '../history'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ...state.register\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        register: (userName, password, name, email) => {\r\n            register(userName, password, name, email).then(res => {\r\n                console.log(\"User register succeeded\")\r\n                dispatch(RegisterSuccceeded(res.data))\r\n                history.push('/');\r\n            }).catch(err => {\r\n                console.error(\"User register failed\")\r\n                dispatch(RegisterFailed(err))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register)","\r\nexport function RegisterSuccceeded(data) {\r\n    return { type: \"REGISTER_SUCCEEDED\" , data: data }\r\n}\r\n\r\nexport function RegisterFailed (error) {\r\n    return { type: \"REGISTER_FAILED\" , error: error }\r\n}","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '450px',\r\n        width: '85% ',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    text:{\r\n        fontSize:\"16px\",\r\n        color:\"black\",\r\n        // fontFamily: \"Montserrat\"\r\n    },\r\n    signUp: {\r\n        textDecoration: \"underline\",\r\n        cursor: \"pointer\"\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n        fontSize: \"18px\",\r\n        margin: \"5px\"\r\n    },\r\n    field: {\r\n        margin: \"10px\"\r\n    }\r\n});\r\nexport default styles;","import React, { Component, Fragment } from 'react';\r\nimport styles from './Login.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Button, TextField, FormControl, FormLabel, Paper, Typography} from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport history from '../../history'\r\nimport {login} from \"../../serverapi\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass Login extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {errorMsg: \"\"};\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        let userName = this.userName.value;\r\n        let password = this.password.value;\r\n\r\n        if (userName == '' || password == '') {\r\n            this.setState({errorMsg: \"Field can not be empty\"})\r\n        } else {\r\n            this.props.login(this.userName.value, this.password.value);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({errorMsg: nextProps.errorMsg})\r\n    }\r\n\r\n    routeToRegister() {\r\n        history.push('register')\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                        <Typography className={classes.title}>\r\n                            Log In\r\n                        </Typography>\r\n                    </AppBar>\r\n\r\n                    <FormControl>\r\n\r\n\r\n                    </FormControl>\r\n                    <div className=\"Login\">\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"userName\"\r\n                                    //className={classNames(classes.margin, classes.textField)}\r\n                                    variant=\"outlined\"\r\n                                    label=\"User Name\"\r\n                                    inputRef={el => this.userName = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField ref='password'\r\n                                           type=\"password\"\r\n                                           variant=\"outlined\"\r\n                                           inputRef={el => this.password = el}\r\n                                           label=\"Password\"\r\n                                />\r\n                            </Grid>\r\n\r\n                                <p className={classes.error}>{this.state.errorMsg}</p>\r\n\r\n                            <Grid item xs={12}>\r\n                                <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                                    Log In\r\n                                </Button>\r\n                            </Grid>\r\n                        </form>\r\n\r\n                        <p className={classes.text}>\r\n                            Dont have an account yet? <a href className={classes.signUp} onClick={this.routeToRegister}> Sign up </a>\r\n                        </p>\r\n                    </div>\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Login);\r\n","import { connect } from 'react-redux'\r\nimport Login from '../components/Login/Login'\r\nimport {LoginSuccceeded, LoginFailed} from '../actions/login'\r\nimport {login} from '../serverapi/'\r\nimport history from '../history'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n\r\n    return {\r\n        ...state.login\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: (userName, password) => {\r\n            login(userName, password).then(res => {\r\n                console.log(\"User login succeeded\")\r\n                dispatch(LoginSuccceeded(res.data))\r\n                history.push('/device_list')\r\n            }).catch(err => {\r\n                console.error(\"User login failed\")\r\n                console.error(err)\r\n                dispatch(LoginFailed(err.response.data.message))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","\r\nexport function LoginSuccceeded(data) {\r\n    return { type: \"LOGIN_SUCCEEDED\" , data: data }\r\n}\r\n\r\nexport function Logout() {\r\n    return { type: \"LOGOUT\" }\r\n}\r\n\r\nexport function LoginFailed (error) {\r\n    return { type: \"LOGIN_FAILED\" , error: error }\r\n}","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '450px',\r\n        width: '85% ',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    text:{\r\n        fontSize:\"16px\",\r\n        color:\"black\",\r\n        // fontFamily: \"Montserrat\"\r\n    },\r\n    signUp: {\r\n        textDecoration: \"underline\",\r\n        cursor: \"pointer\"\r\n    },\r\n    addButton: {\r\n        color: \"cornflowerblue\",\r\n        cursor: \"pointer\",\r\n        marginRight: \"80px\"\r\n    },\r\n    tableRows: {\r\n        height: '100px',\r\n        maxHeight: '100px',\r\n        overflowY: 'scroll'\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n        fontSize: \"18px\",\r\n        margin: \"5px\"\r\n    },\r\n    addDeviceTitle: {\r\n        color: \"darkslategray\",\r\n        float: \"left\",\r\n        marginLeft: \"20px\",\r\n        marginBottom: \"0px\",\r\n    }\r\n});\r\nexport default styles;","import React, {Component, Fragment} from 'react';\r\nimport styles from './ArduionsList.css'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Button,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport history from '../../history';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport BarChart from '@material-ui/icons/BarChart';\r\nimport Timelapse from '@material-ui/icons/Timelapse';\r\nimport LogoutIcon from '@material-ui/icons/ExitToApp';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass ArduionsList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getUserDevices(this.props.token, this.props.user_id);\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            errorMsg: \"\",\r\n            devices: [],\r\n            isDialogOpen: false\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errorMsg) {\r\n            this.setState({errorMsg: nextProps.errorMsg});\r\n        } else if (nextProps.devices) {\r\n            if (this.state.formElement) {\r\n                this.state.formElement.reset();\r\n            }\r\n            this.setState({devices: nextProps.devices, errorMsg: \"\"});\r\n        }\r\n    }\r\n\r\n    handleRouteToStatus = (arduinoId) => { // redirect to Status\r\n        this.props.resetStatus()\r\n        this.props.updateAdruinoId(arduinoId);\r\n    };\r\n\r\n    routeToStatusHistory() {\r\n        history.push('status_history')\r\n    }\r\n\r\n    routeToStatistics() {\r\n        history.push('statistics_chart')\r\n    }\r\n\r\n    logout() {\r\n        this.props.logout()\r\n        history.push('')\r\n    }\r\n\r\n    handleCloseDialog() {\r\n        this.setState({isDialogOpen: false})\r\n    }\r\n\r\n    handleAddRow = (e) => {\r\n        e.preventDefault();\r\n\r\n\r\n        let arduinoId = this.id.value;\r\n        let arduinoName = this.name.value;\r\n\r\n        if (arduinoId == '' || arduinoName == '') {\r\n            this.setState({errorMsg: \"Field can not be empty\"})\r\n        } else if (isNaN(arduinoId)) {\r\n            this.setState({errorMsg: \"Device id field must contain only numbers\"})\r\n        } else {\r\n            this.props.addNewDevice(this.props.token, this.props.user_id,\r\n                this.id.value, this.name.value);\r\n            this.setState({formElement: e.target})\r\n        }\r\n    };\r\n\r\n    handleDeleteRow = (deviceIdToDelete) => {\r\n        this.props.deleteDevice(this.props.token, this.props.user_id, deviceIdToDelete);\r\n    };\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        const {classes, devices} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n                        <Typography className={classes.title}>\r\n                            Your Devices\r\n                        </Typography>\r\n                        <div>\r\n                            <LogoutIcon onClick={this.logout.bind(this)} style={{float: 'right' , fontSize: 35, cursor: 'pointer'}}/>\r\n                            <Timelapse onClick={this.routeToStatusHistory} style={{float: 'left', fontSize: 35, cursor: 'pointer'}}/>\r\n                            <BarChart onClick={this.routeToStatistics} style={{float: 'left', fontSize: 35, cursor: 'pointer'}}/>\r\n                            <AddIcon onClick={() => this.setState({isDialogOpen: true})} style={{float: 'left', fontSize: 35, cursor: 'pointer'}}/>\r\n                        </div>\r\n                    </AppBar>\r\n                    <Table className={classes.table}>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Device Id</TableCell>\r\n                                <TableCell>Description</TableCell>\r\n                                <TableCell></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                    </Table>\r\n\r\n                    <div style={{overflow: 'auto', maxHeight: '300px'}}>\r\n                        <Table style={{tableLayout: 'fixed'}}>\r\n                            <TableBody className={classes.tableRows}>\r\n\r\n                                {this.state.devices && this.state.devices.map((device) => {\r\n                                    return (\r\n                                        <TableRow key={device.id} hover>\r\n                                            <TableCell component=\"th\" scope=\"row\"\r\n                                                       onClick={() => this.handleRouteToStatus(device.id)}>\r\n                                                {device.id}\r\n                                            </TableCell>\r\n                                            <TableCell\r\n                                                onClick={() => this.handleRouteToStatus(device.id)}>{device.name}</TableCell>\r\n                                            <TableCell><DeleteIcon\r\n                                                onClick={() => this.handleDeleteRow(device.id)}  style={{cursor: 'pointer'}}/></TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </div>\r\n                    <Dialog open={this.state.isDialogOpen} onClose={this.handleCloseDialog.bind(this)} aria-labelledby=\"form-dialog-title\">\r\n                        <form onSubmit={this.handleAddRow}>\r\n                            <DialogTitle id=\"form-dialog-title\">Add a new device</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    Add a new gas monitor device.\r\n                                </DialogContentText>\r\n\r\n                                <TextField\r\n                                    id=\"id\"\r\n                                    placeholder=\"Device Id\"\r\n                                    inputRef={el => this.id = el}\r\n                                    autoFocus\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                />\r\n                                <TextField\r\n                                    id=\"name\"\r\n                                    placeholder=\"Name\"\r\n                                    inputRef={el => this.name = el}\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                />\r\n\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={this.handleCloseDialog.bind(this)} color=\"primary\" >\r\n                                    Close\r\n                                </Button>\r\n                                <Button onClick={this.handleCloseDialog.bind(this)} color=\"primary\" type=\"submit\">\r\n                                    Add\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </form>\r\n                    </Dialog>\r\n                    <p className={classes.error}>{this.state.errorMsg}</p>\r\n                    {/*<AddCircle className={classes.addButton} onClick={this.handleAddRow}/>*/}\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ArduionsList);\r\n","\r\n\r\nexport function arduionsListLoaded(data) {\r\n    return { type: \"ARDUIONS_LIST_LOADED\" , data: data }\r\n}\r\nexport function updateAdruinoId(data) {\r\n    return { type: \"UPDATE_ARDUINO_ID\" , data: data }\r\n}\r\nexport function deviceActionSucceeded(data) {\r\n    return { type: \"DEVICE_ACTION_SUCCEEDED\" , data: data }\r\n}\r\n\r\nexport function deviceAdditoinField(error) {\r\n    return { type: \"DEVICE_ADDITION_FIELD\" , error: error }\r\n}\r\n\r\n","import { connect } from 'react-redux'\r\nimport ArduionsList from '../components/ArduinosList/ArduionsList'\r\nimport {arduionsListLoaded, deviceActionSucceeded, deviceAdditoinField, updateAdruinoId} from '../actions/arduionsList'\r\nimport {resetStatus} from '../actions/status'\r\nimport {getUserDevices, addNewDevice, deleteDevice, updateDevice} from '../serverapi';\r\nimport {Logout} from '../actions/login'\r\nimport history from '../history';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.app.token,\r\n        user_id: state.app.user_id,\r\n        ...state.arduionsList,\r\n        ...state.login\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        logout: () => {\r\n            console.log(\"Logged out\")\r\n            dispatch(Logout())\r\n        },\r\n\r\n        resetStatus: () => {\r\n            dispatch(resetStatus())\r\n        },\r\n\r\n        getUserDevices: (token, id) => {\r\n            console.log(\"token\" + token)\r\n            getUserDevices(token, id).then(res => {\r\n                console.log(\"User devices loaded\")\r\n                dispatch(arduionsListLoaded(res.data))\r\n            }).catch(err => {\r\n                console.error(\"User devices load failed\")\r\n                console.error(err)\r\n            })\r\n        },\r\n        updateAdruinoId: (id) => {\r\n            dispatch(updateAdruinoId(id));\r\n            history.push('/device_status/' + id)\r\n        },\r\n        addNewDevice: (token, id, newDeviceId, newDeviceName) => {\r\n            addNewDevice(token, id, newDeviceId, newDeviceName).then(res => {\r\n               console.log(\"Device with id \" + newDeviceId + \" was added successfully.\")\r\n                dispatch(deviceActionSucceeded(res.data));\r\n            }).catch(err => {\r\n                console.log(\"Error in device addition with id \" + newDeviceId);\r\n                console.log(err.response);\r\n                dispatch(deviceAdditoinField(err.response.data.message));\r\n            })\r\n        },\r\n        deleteDevice: (token, id, deviceToDelete) => {\r\n            deleteDevice(token, id, deviceToDelete).then(res => {\r\n                console.log(\"Delete device with id \" + deviceToDelete + \" succeeded.\")\r\n                dispatch(deviceActionSucceeded(res.data));\r\n                }\r\n            ).catch(error => {\r\n                console.log(\"Error in deleting device with id \" + deviceToDelete);\r\n                console.log(error)\r\n            })\r\n        },\r\n        updateDevice: (token, deviceToUpdateId, deviceNewName) => {\r\n            updateDevice(token, deviceToUpdateId, deviceNewName).then(res => {\r\n                console.log(\"Device with id \" + deviceToUpdateId + \" was updated successfully.\")\r\n                dispatch(deviceActionSucceeded(res.data));\r\n            }).catch(err => {\r\n                console.log(\"Error in device updating with id \" + deviceToUpdateId);\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArduionsList)","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '450px',\r\n        width: '85% ',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    chart: {\r\n        width: \"100%\",\r\n        height: \"280px\"\r\n    },\r\n    tabs: {\r\n        fontSize: \"20px\",\r\n        color: \"Black\",\r\n        fontFamily: \"Montserrat\"\r\n    },\r\n    loader: {\r\n        marginTop: \"100px\"\r\n    }\r\n});\r\nexport default styles;","import React, { Component, Fragment } from 'react';\r\nimport styles from './StatisticsChart.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Button, TextField, FormControl, FormLabel, Paper, Typography} from '@material-ui/core';\r\nimport Chart from \"react-google-charts\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport \"react-tabs/style/react-tabs.css\";\r\nimport Loader from 'react-loader-spinner'\r\n\r\nconst options = {\r\n    hAxis: {title: \"Days\"},\r\n    vAxis: {title: \"Times\",viewWindow: {min:0, max:10}},\r\n    legend: {position: 'none'}\r\n}\r\n\r\nclass StatisticsChart extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getStatistics(this.props.token, this.props.user_id);\r\n       // this.setState({isLoading: false})\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { tabIndex: 0 , isLoading: true};\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({isLoading: false})\r\n    }\r\n\r\n    render() {\r\n        const {classes, lightOptions, gasOptions} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                        <Typography className={classes.title}>\r\n                            Statistics\r\n                        </Typography>\r\n                    </AppBar>\r\n                    {this.state.isLoading &&\r\n                    <div className={classes.loader}><Loader\r\n                        type=\"Oval\"\r\n                        color=\"#00BFFF\"\r\n                        height=\"100\"\r\n                        width=\"100\"\r\n                    /></div> }\r\n\r\n                    {!this.state.isLoading &&\r\n                    <Tabs selectedIndex={this.state.tabIndex} onSelect={tabIndex => this.setState({ tabIndex })}\r\n                          className={classes.tabs}>\r\n                        <TabList>\r\n                            <Tab>Light</Tab>\r\n                            <Tab >Gas</Tab>\r\n                        </TabList>\r\n\r\n                        <TabPanel>\r\n                            <div>\r\n                                <p>Last week light statistics </p>\r\n                                <Chart className= {classes.chart}\r\n                                       chartType=\"ColumnChart\"\r\n                                       data={lightOptions}\r\n                                       options={options}\r\n                                />\r\n                            </div>\r\n                        </TabPanel>\r\n                        <TabPanel>\r\n                            <div>\r\n                                <p>Last week gas statistics </p>\r\n                                <Chart className= {classes.chart}\r\n                                       chartType=\"ColumnChart\"\r\n                                       data={gasOptions}\r\n                                       options={options}\r\n                                />\r\n                            </div>\r\n                        </TabPanel>\r\n                    </Tabs> }\r\n\r\n\r\n                </Paper>\r\n            </Fragment>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(StatisticsChart);\r\n","import { connect } from 'react-redux'\r\nimport StatisticsChart from '../components/StatisticsChart/StatisticsChart'\r\nimport {StatisticsDataFetched} from '../actions/statisticsChart'\r\nimport {getStatusHistory} from '../serverapi';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    debugger;\r\n    return {\r\n        token: state.app.token,\r\n        user_id: state.app.user_id,\r\n        ...state.arduionsList,\r\n        ...state.login,\r\n        ...state.statisticsChart\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        getStatistics: (token, id) => {\r\n            getStatusHistory(token, id).then(res => {\r\n                debugger;\r\n                let chartData = getChartArray(res.data);\r\n                dispatch(StatisticsDataFetched( chartData))\r\n            }).catch(err => {\r\n                console.error(\"User devices load failed\")\r\n                console.error(err)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nfunction getChartArray(data) {\r\ndebugger;\r\n    var weekStart = new Date();\r\n    weekStart.setDate(weekStart.getDate() -7)\r\n\r\n    let daysInWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday','Saturday'];\r\n    let lightCounter = [0,0,0,0,0,0,0];\r\n    let gasCounter = [0,0,0,0,0,0,0];\r\n\r\n    // Create array of all statuses\r\n    let allStatuses = [];\r\n    data.forEach(function(userArduinoStatuses){\r\n        allStatuses = allStatuses.concat(userArduinoStatuses.history)\r\n    });\r\n\r\n    // Running over the statuses\r\n    allStatuses.forEach(function(status){\r\n        let statusTime = new Date(status.time)\r\n        // Check if the status is relavant\r\n        if(statusTime > weekStart) {\r\n            if (status.gasStatus){\r\n                gasCounter[statusTime.getDay()]++;\r\n            }\r\n            if (status.lightStatus){\r\n                lightCounter[statusTime.getDay()]++;\r\n            }\r\n        }\r\n    })\r\n\r\n    // Shift days order\r\n    for (let i = 0; i < new Date().getDay() + 1; i++){\r\n        let datTemp = daysInWeek.shift();\r\n        let lightCountTemp = lightCounter.shift();\r\n        let gasCountTemp = gasCounter.shift();\r\n        daysInWeek.push(datTemp);\r\n        lightCounter.push(lightCountTemp)\r\n        gasCounter.push(gasCountTemp)\r\n    }\r\n\r\n\r\n\r\n    let gasOption =  [\r\n        [\"Element\", \"Count\", { role: \"style\" }],\r\n    ];\r\n    let lightOption =  [\r\n        [\"Element\", \"Count\", { role: \"style\" }],\r\n    ];\r\n\r\n    // Create the array for the chart\r\n    for (let i = 0; i < 7; i++) {\r\n        gasOption.push( [daysInWeek[i], gasCounter[i], \"cornflowerblue\"]);\r\n        lightOption.push( [daysInWeek[i], lightCounter[i], \"cornflowerblue\"]);\r\n    }\r\n\r\n    return {lightOptions: lightOption, gasOptions: gasOption};\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StatisticsChart)","\r\nexport function StatisticsDataFetched(data) {\r\n    return { type: \"STATISTICS_DATA_FETCHED\" , data: data }\r\n}\r\n","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '450px',\r\n        width: '85% ',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    text:{\r\n        fontSize:\"16px\",\r\n        color:\"black\",\r\n        // fontFamily: \"Montserrat\"\r\n    },\r\n    signUp: {\r\n        textDecoration: \"underline\",\r\n        cursor: \"pointer\"\r\n    }\r\n});\r\nexport default styles;","import React, { Component, Fragment } from 'react';\r\nimport styles from './StatusHistory.css'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Table, TableBody, TableCell, TableHead, TableRow, Paper, Typography, TextField} from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport history from '../../history';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Button from \"@material-ui/core/es/Button/Button\";\r\nimport BarChart from \"@material-ui/core/SvgIcon/SvgIcon\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\n\r\n\r\nclass StatusHistory extends Component{\r\n    componentDidMount() {\r\n        this.props.getStatusHistory(this.props.token,this.props.user_id);\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {expandedRows: [],\r\n            devicesHistory: []\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        debugger;\r\n        if (nextProps.devicesHistory){\r\n            if (this.state.formElement) {\r\n                this.state.formElement.reset();\r\n            }\r\n\r\n            this.setState({ devicesHistory: nextProps.devicesHistory});\r\n        }\r\n    }\r\n\r\n\r\n    handleExpand = (statusHistory) =>{\r\n        debugger;\r\n        let newExpandedRows = [...this.state.expandedRows];\r\n        let allExpanded = this.state.allExpanded;\r\n        let idxFound = newExpandedRows.findIndex((id)=>{\r\n            return id === statusHistory.id;\r\n        });\r\n\r\n        if(idxFound > -1){\r\n            console.log(\"Collapsing \" + statusHistory.id + \" \" + idxFound);\r\n            newExpandedRows.splice(idxFound, 1);\r\n        }\r\n        else{\r\n            console.log(\"Expanding \" + statusHistory.id);\r\n            newExpandedRows.push(statusHistory.id);\r\n        }\r\n\r\n        console.log(\"Expanded rows\");\r\n        console.log(newExpandedRows);\r\n\r\n        this.setState({expandedRows: [...newExpandedRows]});\r\n    }\r\n\r\n    isExpanded = (statusHistory)=>{\r\n        const idx = this.state.expandedRows.find(\r\n            (id)=>{\r\n                return id === statusHistory.id;\r\n            }\r\n        );\r\n\r\n        return idx > -1;\r\n    }\r\n\r\n    expandAll=(devices)=>{\r\n        console.log(\"ExapndedRows: \" + this.state.expandedRows.length);\r\n        console.log(\"devices:      \" + devices.length);\r\n        if(this.state.expandedRows.length === devices.length){\r\n\r\n            let newExpandedRows = [];\r\n            this.setState({expandedRows: [...newExpandedRows]});\r\n            console.log(\"Collapsing all...\");\r\n        }\r\n        else{\r\n            let newExpandedRows = devices.map(\r\n                statusHistory => statusHistory.history.arduinoId\r\n            );\r\n            this.setState({expandedRows: [...newExpandedRows]});\r\n            console.log(\"Expanding all...\");\r\n            console.log(\"Expanded rows \" + newExpandedRows.length)\r\n        }\r\n    }\r\n\r\n    getRows = (deviceHistory)=>{\r\n\r\n        let rows = [];\r\n\r\n        const firstRow = (\r\n            <TableRow onClick={()=>this.handleExpand(deviceHistory)}>\r\n                <TableCell >\r\n                    <Button>\r\n                        {this.isExpanded(deviceHistory) ? \"-\" : \"+\"}\r\n                    </Button>\r\n                </TableCell>\r\n                <TableCell>{deviceHistory.id}</TableCell>\r\n            </TableRow>\r\n        )\r\n\r\n        rows.push(firstRow);\r\ndebugger;\r\n        if(this.isExpanded(deviceHistory)){\r\n            const detailRow = (\r\n                deviceHistory.history.map( (history) => {\r\n                       return( <TableRow >\r\n                            <TableCell colSpan=\"4\" >\r\n                                <br/>\r\n                                <br/>\r\n                                <div className=\"attribute\">\r\n                                    <div className=\"attribute-name\">time used::</div>\r\n                                    <div className=\"attribute-value\">{history.time}</div>\r\n                                </div>\r\n                                <br/>\r\n                                <div className=\"attribute\">\r\n                                    <div className=\"attribute-name\">Light status:</div>\r\n                                    <div className=\"attribute-value\">{history.lightStatus.toString()}</div>\r\n                                </div>\r\n                                <br/>\r\n                                <div className=\"attribute\">\r\n                                    <div className=\"attribute-name\">Gas status:</div>\r\n                                    <div className=\"attribute-value\">{history.gasStatus.toString()}</div>\r\n                                </div>\r\n                                <br/>\r\n                            </TableCell>\r\n                        </TableRow>)\r\n                    })\r\n            );\r\n            rows.push(detailRow);\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    getTable = ()=>{\r\n        debugger\r\n        const devicesRow = this.state.devicesHistory.map((device)=>{\r\n            return this.getRows(device);\r\n        });\r\n\r\n        return (\r\n            <Table style={{tableLayout: 'fixed'}} className=\"my-table\" >\r\n                <TableBody>\r\n                    {devicesRow}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const {classes} = this.props;\r\n        return (\r\n            <Fragment>\r\n\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n                        <Typography>\r\n                            Your devices history\r\n                        </Typography>\r\n                    </AppBar>\r\n                    <div style={{overflow: 'auto', height: '300px'}}>\r\n                    {this.getTable()}\r\n                    </div>\r\n\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(StatusHistory) ;","import { connect } from 'react-redux'\r\nimport statusHistory from '../components/StatusHistory/StatusHistory'\r\nimport {statusDataFetched} from '../actions/statusHistory'\r\nimport {getStatusHistory} from '../serverapi';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.app.token,\r\n        user_id: state.app.user_id,\r\n        ...state.statusHistory,\r\n        ...state.login\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        getStatusHistory: (token,id) => {\r\n            console.log(\"token\" + token)\r\n            getStatusHistory(token,id).then(res => {\r\n                console.log(\"status history  loaded\")\r\n                console.log(res.data)\r\n\r\n                function  filterByGasAndLight() {\r\n                    let filteredDevices = []\r\n                    res.data.forEach(function (currentDevice) {\r\n                        let currentHistory;\r\n                        currentHistory = currentDevice.history.filter(currentHistory => {\r\n                            if (currentHistory.gasStatus === true || currentHistory.lightStatus === true) {\r\n                                return currentHistory\r\n                            }\r\n                        });\r\n                        if (currentHistory.length > 0) {\r\n                            filteredDevices.push(currentDevice)\r\n                        }\r\n                    })\r\n                    return filteredDevices;\r\n                }\r\n\r\n                const devicesHistory = {devicesHistory : filterByGasAndLight()};\r\n                dispatch(statusDataFetched(devicesHistory))\r\n            }).catch(err => {\r\n                console.error(\"status history loading failed\")\r\n                console.error(err)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(statusHistory)","export function statusDataFetched(data) {\r\n    return { type: \"STATUS_HISTORY_DATA_FETCHED\" , data: data }\r\n}","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport {Provider} from 'react-redux'\r\nimport {createStore} from 'redux'\r\nimport reducers from './reducers/'\r\nimport './App.css';\r\nimport StatusContainer from \"./containers/StatusContainer\";\r\nimport RegisterContainer from \"./containers/RegisterContainer\"\r\nimport LoginContainer from \"./containers/LoginContainer\"\r\nimport ArduionsListContainer from \"./containers/ArduionsListContainer\"\r\nimport StatisticsChartContainer from \"./containers/StatisticsChartContainer\"\r\nimport statusHistory from \"./containers/StatusHistoryContainer.js\"\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport { Router, Route } from 'react-router-dom';\r\nimport history from './history'\r\n\r\n\r\nconst store = createStore(reducers)\r\nstore.subscribe(() => {\r\n    localStorage.setItem('TOKEN', store.getState().app.token)\r\n    localStorage.setItem('USER_ID', store.getState().app.user_id)\r\n})\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: \"Montserrat\"\r\n    }\r\n});\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n            <Provider store={store}>\r\n                <div className=\"App\">\r\n                    <header className=\"App-header\">\r\n                        <Router history={history}>\r\n                            <Route path=\"/\" exact component={LoginContainer} />\r\n                            <Route path=\"/register\" component={RegisterContainer} />\r\n                            <Route path=\"/device_status/:id\" component={StatusContainer} />\r\n                            <Route path=\"/device_list\" component={ArduionsListContainer} />\r\n                            <Route path=\"/status_history\" component={statusHistory} />\r\n                            <Route path=\"/statistics_chart\" component={StatisticsChartContainer} />\r\n                        </Router>\r\n                    </header>\r\n                </div>\r\n            </Provider>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}