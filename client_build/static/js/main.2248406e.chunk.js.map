{"version":3,"sources":["logo.svg","reducers/status.js","reducers/app.js","reducers/login.js","reducers/arduionsList.js","reducers/statusHistory.js","reducers/index.js","components/CurrentStatus/CurrentStatus.css.js","history.js","components/CurrentStatus/CurrentStatus.js","serverapi/index.js","containers/StatusContainer.js","actions/status.js","components/Register/Register.css.js","components/Register/Register.js","containers/RegisterContainer.js","actions/register.js","components/Login/Login.css.js","components/Login/Login.js","containers/LoginContainer.js","actions/login.js","components/ArduinosList/ArduionsList.css.js","components/ArduinosList/ArduionsList.js","actions/arduionsList.js","containers/ArduionsListContainer.js","components/StatusHistory/StatusHistory.js","containers/StatusHistoryContainer.js","actions/statusHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","defaultState","lightStatus","gasStatus","arduinoID","token","localStorage","getItem","combineReducers","status","state","arguments","length","undefined","action","type","Object","assign","data","arduionsList","errorMsg","error","arduinoId","app","setItem","login","statusHistory","styles","theme","root","objectSpread","mixins","gutters","paddingBottom","spacing","unit","height","width","paddingRight","paddingLeft","rowForIndicators","display","header","paddingTop","backgroundColor","color","title","fontSize","fontWeight","date","marginBottom","textAlign","marginLeft","fontFamily","inidcatorSection","marginTop","formControl","margin","createBrowserHistory","CurrentStatus","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","currentTime","_this2","getStatus","_id","days","months","setInterval","Date","setState","getDay","getDate","getMonth","getFullYear","toLocaleTimeString","_this$props","classes","history","push","react_default","a","createElement","react","index_es","className","elevation","AppBar_default","position","component","Info_default","control","checked","value","label","labelPlacement","Component","withStyles","SERVER","connect","dispatch","userId","id","console","log","axios","get","then","res","currArduinoStatus","filter","catch","err","text","field","Register","handleSubmit","bind","assertThisInitialized","e","preventDefault","userName","password","email","name","test","String","toLowerCase","register","onSubmit","Grid_default","item","xs","variant","inputRef","el","ref","button","post","username","headers","Content-Type","signUp","textDecoration","cursor","Login","nextProps","href","onClick","routeToRegister","response","message","addButton","marginRight","tableRows","maxHeight","overflowY","addDeviceTitle","float","ArduionsList","handleRouteToStatus","updateAdruinoId","handleAddRow","arduinoName","isNaN","addNewDevice","formElement","target","handleDeleteRow","deviceIdToDelete","deleteDevice","devices","getUserDevices","reset","BarChart_default","routeToStatusHistory","table","style","overflow","tableLayout","map","device","index","key","hover","scope","Delete_default","container","placeholder","Add_default","deviceActionSucceeded","authorization","newDeviceId","newDeviceName","deviceToDelete","delete","updateDevice","deviceToUpdateId","deviceNewName","put","handleExpand","player","newExpandedRows","toConsumableArray","expandedRows","idxFound","allExpanded","findIndex","splice","isExpanded","find","expandAll","players","concat","getRows","rows","firstRow","Button","detailRow","colSpan","time","toString","getPlayerTable","playerRows","devicesHistory","getStatusHistory","store","createStore","reducers","subscribe","getState","createMuiTheme","typography","App","core_styles","es","react_router","path","exact","LoginContainer","RegisterContainer","StatusContainer","ArduionsListContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2248406e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","\r\n\r\nconst defaultState = {\r\n    lightStatus: false,\r\n    gasStatus: false,\r\n    arduinoID: \"1\",\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"STATUS_DATA_FETCHED\":\r\n            return Object.assign({}, action.data)\r\n        default: return state\r\n    }\r\n}\r\n\r\n","const defaultState = {\r\n    token: localStorage.getItem('TOKEN')\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"LOGIN_SUCCEEDED\":\r\n            localStorage.setItem('TOKEN', action.token);\r\n            return Object.assign({}, {token: action.data.token})\r\n        default: return state\r\n    }\r\n}\r\n\r\n","const defaultState = {\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    debugger;\r\n    switch (action.type) {\r\n        case \"LOGIN_FAILED\":\r\n            return Object.assign({},  {errorMsg: action.error})\r\n        case \"LOGIN_SUCCEEDED\":\r\n            return Object.assign({}, action.data)\r\n        default: return state\r\n    }\r\n}","\r\n\r\nconst defaultState = {\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"ARDUIONS_LIST_LOADED\":\r\n            return Object.assign({}, action.data)\r\n        case \"DEVICE_ACTION_SUCCEEDED\":\r\n            return Object.assign({}, action.data)\r\n        case \"DEVICE_ADDITION_FIELD\":\r\n            return Object.assign({}, {errorMsg: action.error})\r\n        case \"UPDATE_ARDUINO_ID\":\r\n            return Object.assign({}, {arduinoId: action.data})\r\n        default: return state\r\n    }\r\n}\r\n\r\n","\r\n\r\nconst defaultState = {\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"STATUS_HISTORY_DATA_FETCHED\":\r\n            return Object.assign({}, action.data)\r\n        default: return state\r\n    }\r\n}\r\n\r\n","import { combineReducers } from 'redux'\r\nimport status from './status'\r\nimport app from './app'\r\nimport login from './login'\r\nimport arduionsList from './arduionsList'\r\nimport statusHistory from './statusHistory'\r\n\r\n\r\nexport default combineReducers({status,arduionsList, app, login,statusHistory})","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '350px',\r\n        width: '400px',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    rowForIndicators:{\r\n        display:\"-webkit-box\"\r\n    },\r\n    header: {\r\n      paddingTop: '10px',\r\n      backgroundColor: 'cornflowerblue',\r\n      color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    date:{\r\n        fontSize:\"18px\",\r\n        marginBottom: \"20px\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    arduinoID:{\r\n        fontSize:\"16px\",\r\n        color:\"#a28b8b\",\r\n        textAlign:\"left\",\r\n        marginLeft: \"30px\",\r\n        fontFamily: \"Montserrat\"\r\n    },\r\n    inidcatorSection:{\r\n        marginTop: \"20px\"\r\n    },\r\n        formControl: {\r\n            margin: theme.spacing.unit * 3,\r\n        },\r\n    \r\n    \r\n});\r\nexport default styles;","// history.js\r\nimport { createBrowserHistory } from 'history'\r\n\r\nexport default createBrowserHistory({\r\n    /* pass a configuration object here if needed */\r\n})","import React, { Component, Fragment } from 'react';\r\nimport {Paper,Switch, Radio,FormControl,FormLabel,FormControlLabel,FormGroup,Checkbox, Typography,FormHelperText } from '@material-ui/core';\r\nimport styles from './CurrentStatus.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Info from '@material-ui/icons/Info';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport history from '../../history'\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass CurrentStatus extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {currentTime: ''};\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getStatus(this.props.token, this.props._id, this.props.arduinoId);\r\n\r\n        var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        setInterval( () => {\r\n            var date = new Date();\r\n            this.setState({\r\n                currentTime : days[date.getDay()] + \", \" + date.getDate() + ' ' + months[date.getMonth()] +\r\n                    ' ' + date.getFullYear() + ', ' + date.toLocaleTimeString()\r\n            })\r\n        },1000)\r\n\r\n        setInterval(() => {\r\n            this.props.getStatus(this.props.token, this.props._id, this.props.arduinoId);\r\n        }, 10000)\r\n    }\r\n\r\n    render() {\r\n        const {lightStatus, gasStatus, arduinoId, classes} = this.props;\r\n\r\n        if (this.props.token === undefined || this.props.token === null || this.props.token === \"\") {\r\n            history.push('/')\r\n            return (<div></div>)\r\n        }\r\n        \r\n        return (\r\n            \r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                            <Typography className={classes.title}>\r\n                                Current Status\r\n                            </Typography>\r\n                            <Typography className={classes.date}>\r\n                                { this.state.currentTime }\r\n                            </Typography>\r\n\r\n                    </AppBar>\r\n\r\n                    <p className={classes.arduinoID}>\r\n                        <b> Arduino Id : </b> {arduinoId} {gasStatus} {lightStatus}\r\n                    </p>\r\n\r\n\r\n                    <FormControl className={classes.inidcatorSection} component=\"fieldset\">\r\n                        <FormLabel component=\"legend\"> <Info/> Indicators</FormLabel>\r\n                        <FormGroup>\r\n\r\n\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Switch\r\n                                        checked={gasStatus}\r\n\r\n                                        value=\"Leaking\"\r\n                                    />\r\n                                }\r\n                                label=\"Gas Leaking \"\r\n                                labelPlacement=\"start\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Switch\r\n                                        checked={lightStatus}\r\n\r\n                                        value=\"Lit\"\r\n                                    />\r\n                                }\r\n                                label=\"Gas Lit \"\r\n                                labelPlacement=\"start\"\r\n                            />\r\n\r\n\r\n                        </FormGroup>\r\n                    </FormControl>\r\n\r\n                </Paper>\r\n            </Fragment>\r\n\r\n   \r\n        );\r\n    }\r\n}\r\n\r\nexport default  withStyles(styles)(CurrentStatus);\r\n","import axios from 'axios'\r\n\r\nconst SERVER = 'https://iot-gas-monitor.herokuapp.com'\r\n\r\nexport function getStatus(token, id) {\r\n    return axios.get(SERVER + '/status/' + id)//, {params: {token, id}})\r\n}\r\n\r\nexport function getUserDevices(token, id) { // The id need to be here\r\n    return axios.get(SERVER + '/devices/' + id, {\r\n        headers: {\r\n            'authorization' : 'Bearer '+token,\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    })\r\n}\r\nexport function getStatusHistory(token, id) { // The id need to be here\r\n    return axios.get(SERVER + '/status/getArduinoHistory/' + '5ce0144b62e5ed00047b38d2', {\r\n        headers: {\r\n            'authorization' : 'Bearer '+token,\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport function addNewDevice(token, id, newDeviceId, newDeviceName) { // TODO: insert token\r\n    return axios.post(SERVER + '/devices/' + id, {\r\n        \"id\": newDeviceId,\r\n        \"name\": newDeviceName\r\n    }, {\r\n        headers: {\r\n            'authorization' : 'Bearer ' + token,\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\nexport function deleteDevice(token, id, deviceToDelete) { // TODO: insert token\r\n    return axios.delete(SERVER + '/devices/' + id,  {\r\n        headers: {\r\n            'authorization' : 'Bearer ' + token,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data: {\r\n            'arduinoId': deviceToDelete\r\n        }\r\n    })\r\n}\r\n\r\nexport function updateDevice(token, deviceToUpdateId, deviceNewName) { // TODO: insert token\r\n    return axios.put(SERVER + '/devices/' + '5caba627e4b63200044dc316', {\r\n        \"id\": deviceToUpdateId,\r\n        \"name\": deviceNewName\r\n    }, {\r\n        headers: {\r\n            'authorization' : 'Bearer ' + token,\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\nexport function login(userName, password)\r\n{\r\n    return axios.post(SERVER + '/users/authenticate', {\r\n        \"username\": userName,\r\n        \"password\": password\r\n    }, {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\n export function register(userName, password, name, email)\r\n {\r\n     return axios.post(SERVER + '/users/register', {\r\n         \"username\": userName,\r\n         \"password\": password,\r\n         \"name\": name,\r\n         \"email\": email\r\n     }, {\r\n     headers: {\r\n         'Content-Type': 'application/json'\r\n     }\r\n })\r\n }\r\n","import { connect } from 'react-redux'\r\nimport CurrentStatus from '../components/CurrentStatus/CurrentStatus'\r\nimport {statusDataFetched} from '../actions/status'\r\nimport {getStatus} from '../serverapi/'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.app.token,\r\n        ...state.status,\r\n        ...state.login,\r\n        ...state.arduionsList\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        getStatus: (token, userId, arduinoId) => {\r\n            console.log(\"Asked status for \" + arduinoId + \" arduino\");\r\n            getStatus(token, userId).then(res => {\r\n               let currArduinoStatus =\r\n                   res.data.filter(function(status){return status.id == arduinoId});\r\n\r\n                if (currArduinoStatus.length > 0) {\r\n                    console.log(\"Status data fetched for arduino \"+ arduinoId)\r\n                    dispatch(statusDataFetched(currArduinoStatus[0]))\r\n                } else {\r\n                    console.log(\"Couldnt find status for arduino \"+ arduinoId)\r\n                }\r\n\r\n            }).catch(err => {\r\n                console.error(\"Status data fetched failed\")\r\n                console.error(err)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentStatus)","\r\n\r\nexport function statusDataFetched(data) {\r\n    return { type: \"STATUS_DATA_FETCHED\" , data: data }\r\n}","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '370px',\r\n        width: '400px',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    text:{\r\n        fontSize:\"16px\",\r\n        color:\"black\",\r\n        // fontFamily: \"Montserrat\"\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n        fontSize: \"18px\",\r\n        margin: \"5px\"\r\n    },\r\n    field: {\r\n        margin: \"5px\"\r\n    }\r\n});\r\nexport default styles;","import React, { Component, Fragment } from 'react';\r\nimport styles from './Register.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Button, TextField, FormControl, FormLabel, Paper, Typography} from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass Register extends Component {\r\n\r\n\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {errorMsg: \"\"};\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n\r\n        let userName = this.userName.value;\r\n        let password = this.password.value;\r\n        let email = this.email.value;\r\n        let name = this.name.value;\r\n        var emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n        if (userName == '' || password == '' || email == '' || name == '' ) {\r\n            this.setState({errorMsg: \"Field can not be empty\"})\r\n        } else if (!emailRegex.test(String(email).toLowerCase())) {\r\n            this.setState({errorMsg: \"Email adress is not valid\"})\r\n        }\r\n        else {\r\n            this.props.register(this.userName.value, this.password.value, this.name.value, this.email.value);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                        <Typography className={classes.title}>\r\n                            Register\r\n                        </Typography>\r\n                    </AppBar>\r\n\r\n                    <div className=\"Login\">\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"name\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Name\"\r\n                                    inputRef={el => this.name = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"email\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Email\"\r\n                                    inputRef={el => this.email = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"userName\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"User Name\"\r\n                                    inputRef={el => this.userName = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField ref='password'\r\n                                           type=\"password\"\r\n                                           variant=\"outlined\"\r\n                                           inputRef={el => this.password = el}\r\n                                           label=\"Password\"/>\r\n                            </Grid>\r\n\r\n                            <p className={classes.error}>{this.state.errorMsg}</p>\r\n\r\n                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                                Create account\r\n                            </Button>\r\n                        </form>\r\n                    </div>\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Register);\r\n","import { connect } from 'react-redux'\r\nimport Register from '../components/Register/Register'\r\nimport {register} from \"../serverapi\";\r\nimport {RegisterSuccceeded, RegisterFailed} from \"../actions/register\";\r\nimport history from '../history'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ...state.register\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        register: (userName, password, name, email) => {\r\n            register(userName, password, name, email).then(res => {\r\n                console.log(\"User register succeeded\")\r\n                dispatch(RegisterSuccceeded(res.data))\r\n                history.push('/');\r\n            }).catch(err => {\r\n                console.error(\"User register failed\")\r\n                dispatch(RegisterFailed(err))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register)","\r\nexport function RegisterSuccceeded(data) {\r\n    debugger;\r\n    return { type: \"REGISTER_SUCCEEDED\" , data: data }\r\n}\r\n\r\nexport function RegisterFailed (error) {\r\n    return { type: \"REGISTER_FAILED\" , error: error }\r\n}","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '370px',\r\n        width: '400px',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    text:{\r\n        fontSize:\"16px\",\r\n        color:\"black\",\r\n        // fontFamily: \"Montserrat\"\r\n    },\r\n    signUp: {\r\n        textDecoration: \"underline\",\r\n        cursor: \"pointer\"\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n        fontSize: \"18px\",\r\n        margin: \"5px\"\r\n    },\r\n    field: {\r\n        margin: \"10px\"\r\n    }\r\n});\r\nexport default styles;","import React, { Component, Fragment } from 'react';\r\nimport styles from './Login.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Button, TextField, FormControl, FormLabel, Paper, Typography} from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport history from '../../history'\r\nimport {login} from \"../../serverapi\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass Login extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {errorMsg: \"\"};\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        let userName = this.userName.value;\r\n        let password = this.password.value;\r\n\r\n        if (userName == '' || password == '') {\r\n            this.setState({errorMsg: \"Field can not be empty\"})\r\n        } else {\r\n            this.props.login(this.userName.value, this.password.value);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({errorMsg: nextProps.errorMsg})\r\n    }\r\n\r\n    routeToRegister() {\r\n        history.push('register')\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                        <Typography className={classes.title}>\r\n                            Log In\r\n                        </Typography>\r\n                    </AppBar>\r\n\r\n                    <FormControl>\r\n\r\n\r\n                    </FormControl>\r\n                    <div className=\"Login\">\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"userName\"\r\n                                    //className={classNames(classes.margin, classes.textField)}\r\n                                    variant=\"outlined\"\r\n                                    label=\"User Name\"\r\n                                    inputRef={el => this.userName = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField ref='password'\r\n                                           type=\"password\"\r\n                                           variant=\"outlined\"\r\n                                           inputRef={el => this.password = el}\r\n                                           label=\"Password\"\r\n                                />\r\n                            </Grid>\r\n\r\n                                <p className={classes.error}>{this.state.errorMsg}</p>\r\n\r\n                            <Grid item xs={12}>\r\n                                <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                                    Log In\r\n                                </Button>\r\n                            </Grid>\r\n                        </form>\r\n\r\n                        <p className={classes.text}>\r\n                            Dont have an account yet? <a href className={classes.signUp} onClick={this.routeToRegister}> Sign up </a>\r\n                        </p>\r\n                    </div>\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Login);\r\n","import { connect } from 'react-redux'\r\nimport Login from '../components/Login/Login'\r\nimport {LoginSuccceeded, LoginFailed} from '../actions/login'\r\nimport {login} from '../serverapi/'\r\nimport history from '../history'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n\r\n    return {\r\n        ...state.login\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: (userName, password) => {\r\n            login(userName, password).then(res => {\r\n                console.log(\"User login succeeded\")\r\n                dispatch(LoginSuccceeded(res.data))\r\n                history.push('/arduionsList')\r\n            }).catch(err => {\r\n                console.error(\"User login failed\")\r\n                console.error(err)\r\n                dispatch(LoginFailed(err.response.data.message))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","\r\nexport function LoginSuccceeded(data) {\r\n    return { type: \"LOGIN_SUCCEEDED\" , data: data }\r\n}\r\n\r\nexport function LoginFailed (error) {\r\n    return { type: \"LOGIN_FAILED\" , error: error }\r\n}","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '350px',\r\n        width: '400px',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    text:{\r\n        fontSize:\"16px\",\r\n        color:\"black\",\r\n        // fontFamily: \"Montserrat\"\r\n    },\r\n    signUp: {\r\n        textDecoration: \"underline\",\r\n        cursor: \"pointer\"\r\n    },\r\n    addButton: {\r\n        color: \"cornflowerblue\",\r\n        cursor: \"pointer\",\r\n        marginRight: \"80px\"\r\n    },\r\n    tableRows: {\r\n        height: '100px',\r\n        maxHeight: '100px',\r\n        overflowY: 'scroll'\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n        fontSize: \"18px\",\r\n        margin: \"5px\"\r\n    },\r\n    addDeviceTitle: {\r\n        fontSize: \"18px\",\r\n        color: \"darkslategray\",\r\n        float: \"left\",\r\n        marginLeft: \"20px\",\r\n        marginBottom: \"0px\",\r\n        fontFamily: \"Montserrat\"\r\n\r\n    }\r\n});\r\nexport default styles;","import React, {Component, Fragment} from 'react';\r\nimport styles from './ArduionsList.css'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    Typography,\r\n    TextField,\r\n    Button\r\n} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport history from '../../history';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddCircle from '@material-ui/icons/Add';\r\nimport BarChart from '@material-ui/icons/BarChart';\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass ArduionsList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getUserDevices(this.props.token, this.props._id);\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            errorMsg: \"\",\r\n            devices: []\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errorMsg) {\r\n            this.setState({errorMsg: nextProps.errorMsg});\r\n        } else if (nextProps.devices) {\r\n            if (this.state.formElement) {\r\n                this.state.formElement.reset();\r\n            }\r\n            this.setState({devices: nextProps.devices, errorMsg: \"\"});\r\n        }\r\n    }\r\n\r\n    handleRouteToStatus = (arduinoId) => { // redirect to Status\r\n        this.props.updateAdruinoId(arduinoId);\r\n    };\r\n\r\n    routeToStatusHistory() {\r\n        history.push('statusHistory')\r\n    }\r\n\r\n\r\n    handleAddRow = (e) => {\r\n        e.preventDefault();\r\n\r\n        let arduinoId = this.id.value;\r\n        let arduinoName = this.name.value;\r\n\r\n        if (arduinoId == '' || arduinoName == '') {\r\n            this.setState({errorMsg: \"Field can not be empty\"})\r\n        } else if (isNaN(arduinoId)) {\r\n            this.setState({errorMsg: \"Device id field must contain only numbers\"})\r\n        } else {\r\n            this.props.addNewDevice(this.props.token,this.props._id,\r\n                this.id.value, this.name.value);\r\n            this.setState({formElement: e.target})\r\n        }\r\n    };\r\n\r\n    handleDeleteRow = (deviceIdToDelete) => {\r\n        this.props.deleteDevice(this.props.token,this.props._id, deviceIdToDelete);\r\n    };\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        const {classes, devices} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n                        <BarChart onClick={this.routeToStatusHistory}/>\r\n                        {/*<p className={classes.text}>*/}\r\n                        {/*    Dont have an account yet? <a href className={classes.signUp} onClick={this.routeToStatusHistory}> Sign up </a>*/}\r\n                        {/*</p>*/}\r\n\r\n\r\n                        <Typography className={classes.title}>\r\n                            Your Arduions\r\n                        </Typography>\r\n                    </AppBar>\r\n\r\n                    <Table className={classes.table}>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Arduino Id</TableCell>\r\n                                <TableCell>Name</TableCell>\r\n                                <TableCell></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                    </Table>\r\n\r\n                    <div style={{overflow: 'auto', height: '100px'}}>\r\n                        <Table style={{tableLayout: 'fixed'}}>\r\n                            <TableBody className={classes.tableRows}>\r\n\r\n                                {this.state.devices && this.state.devices.map((device, index) => {\r\n                                    return (\r\n                                        <TableRow key={index} hover onClick={() => this.handleRouteToStatus(device.id)}>\r\n                                            <TableCell component=\"th\" scope=\"row\">\r\n                                                {device.id}\r\n                                            </TableCell>\r\n                                            <TableCell>{device.name}</TableCell>\r\n                                            <TableCell><DeleteIcon\r\n                                                onClick={() => this.handleDeleteRow(device.id)}/></TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </div>\r\n                    <p className={classes.addDeviceTitle}>Add device</p>\r\n                    <form onSubmit={this.handleAddRow}>\r\n                        <Grid container spacing={24}>\r\n                            <Grid item xs={5}>\r\n                                <TextField\r\n                                    id=\"id\"\r\n                                    // type=\"number\"\r\n                                    placeholder=\"Arduino Id\"\r\n                                    inputRef={el => this.id = el}\r\n                                    style={{width: 95}}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={5}>\r\n                                <TextField\r\n                                    id=\"name\"\r\n                                    placeholder=\"Name\"\r\n                                    inputRef={el => this.name = el}\r\n                                    style={{width: 100}}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                                <Button type=\"submit\">\r\n                                    <AddCircle className={classes.addButton}/>\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n\r\n                    <p className={classes.error}>{this.state.errorMsg}</p>\r\n\r\n                    {/*<AddCircle className={classes.addButton} onClick={this.handleAddRow}/>*/}\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ArduionsList);\r\n","\r\n\r\nexport function arduionsListLoaded(data) {\r\n    return { type: \"ARDUIONS_LIST_LOADED\" , data: data }\r\n}\r\nexport function updateAdruinoId(data) {\r\n    return { type: \"UPDATE_ARDUINO_ID\" , data: data }\r\n}\r\nexport function deviceActionSucceeded(data) {\r\n    return { type: \"DEVICE_ACTION_SUCCEEDED\" , data: data }\r\n}\r\n\r\nexport function deviceAdditoinField(error) {\r\n    return { type: \"DEVICE_ADDITION_FIELD\" , error: error }\r\n}\r\n\r\n","import { connect } from 'react-redux'\r\nimport ArduionsList from '../components/ArduinosList/ArduionsList'\r\nimport {arduionsListLoaded, deviceActionSucceeded, deviceAdditoinField, updateAdruinoId} from '../actions/arduionsList'\r\nimport {getUserDevices, addNewDevice, deleteDevice, updateDevice} from '../serverapi';\r\nimport history from '../history';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.app.token,\r\n        ...state.arduionsList,\r\n        ...state.login\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        getUserDevices: (token, id) => {\r\n            console.log(\"token\" + token)\r\n            getUserDevices(token, id).then(res => {\r\n                console.log(\"User devices loaded\")\r\n                dispatch(arduionsListLoaded(res.data))\r\n            }).catch(err => {\r\n                console.error(\"User devices load failed\")\r\n                console.error(err)\r\n            })\r\n        },\r\n        updateAdruinoId: (id) => {\r\n            dispatch(updateAdruinoId(id));\r\n            history.push('/status')\r\n        },\r\n        addNewDevice: (token, id, newDeviceId, newDeviceName) => {\r\n            addNewDevice(token, id, newDeviceId, newDeviceName).then(res => {\r\n               console.log(\"Device with id \" + newDeviceId + \" was added successfully.\")\r\n                dispatch(deviceActionSucceeded(res.data));\r\n            }).catch(err => {\r\n                console.log(\"Error in device addition with id \" + newDeviceId);\r\n                console.log(err.response);\r\n                dispatch(deviceAdditoinField(err.response.data.message));\r\n            })\r\n        },\r\n        deleteDevice: (token, id, deviceToDelete) => {\r\n            deleteDevice(token, id, deviceToDelete).then(res => {\r\n                console.log(\"Delete device with id \" + deviceToDelete + \" succeeded.\")\r\n                dispatch(deviceActionSucceeded(res.data));\r\n                }\r\n            ).catch(error => {\r\n                console.log(\"Error in deleting device with id \" + deviceToDelete);\r\n                console.log(error)\r\n            })\r\n        },\r\n        updateDevice: (token, deviceToUpdateId, deviceNewName) => {\r\n            updateDevice(token, deviceToUpdateId, deviceNewName).then(res => {\r\n                console.log(\"Device with id \" + deviceToUpdateId + \" was updated successfully.\")\r\n                dispatch(deviceActionSucceeded(res.data));\r\n            }).catch(err => {\r\n                console.log(\"Error in device updating with id \" + deviceToUpdateId);\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArduionsList)","import React, { Component, Fragment } from 'react';\r\nimport styles from './StatusHistory.css.js'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Table, TableBody, TableCell, TableHead, TableRow, Paper, Typography, TextField} from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport history from '../../history';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Button from \"@material-ui/core/es/Button/Button\";\r\nimport BarChart from \"@material-ui/core/SvgIcon/SvgIcon\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\n\r\n\r\nclass statusHistory extends Component{\r\n    componentDidMount() {\r\n        this.props.getStatusHistory(this.props.token);\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {expandedRows: [],\r\n            devicesHistory: []\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        debugger;\r\n        if (nextProps.devicesHistory){\r\n            if (this.state.formElement) {\r\n                this.state.formElement.reset();\r\n            }\r\n\r\n            this.setState({ devicesHistory: nextProps.devicesHistory});\r\n        }\r\n    }\r\n\r\n\r\n    handleExpand = (player) =>{\r\n        debugger;\r\n        let newExpandedRows = [...this.state.expandedRows];\r\n        let allExpanded = this.state.allExpanded;\r\n        let idxFound = newExpandedRows.findIndex((id)=>{\r\n            return id === player.id;\r\n        });\r\n\r\n        if(idxFound > -1){\r\n            console.log(\"Collapsing \" + player.id + \" \" + idxFound);\r\n            newExpandedRows.splice(idxFound, 1);\r\n        }\r\n        else{\r\n            console.log(\"Expanding \" + player.id);\r\n            newExpandedRows.push(player.id);\r\n        }\r\n\r\n        console.log(\"Expanded rows\");\r\n        console.log(newExpandedRows);\r\n\r\n        this.setState({expandedRows: [...newExpandedRows]});\r\n    }\r\n\r\n    isExpanded = (player)=>{\r\n        const idx = this.state.expandedRows.find(\r\n            (id)=>{\r\n                return id === player.id;\r\n            }\r\n        );\r\n\r\n        return idx > -1;\r\n    }\r\n\r\n    expandAll=(players)=>{\r\n        console.log(\"ExapndedRows: \" + this.state.expandedRows.length);\r\n        console.log(\"Players:      \" + players.length);\r\n        if(this.state.expandedRows.length === players.length){\r\n\r\n            let newExpandedRows = [];\r\n            this.setState({expandedRows: [...newExpandedRows]});\r\n            console.log(\"Collapsing all...\");\r\n        }\r\n        else{\r\n            let newExpandedRows = players.map(\r\n                player => player.history.arduinoId\r\n            );\r\n            this.setState({expandedRows: [...newExpandedRows]});\r\n            console.log(\"Expanding all...\");\r\n            console.log(\"Expanded rows \" + newExpandedRows.length)\r\n        }\r\n    }\r\n\r\n    getRows = (player)=>{\r\n\r\n        let rows = [];\r\n\r\n        const firstRow = (\r\n            <TableRow onClick={()=>this.handleExpand(player)}>\r\n                <TableCell >\r\n                    <Button>\r\n                        {this.isExpanded(player) ? \"-\" : \"+\"}\r\n                    </Button>\r\n                </TableCell>\r\n                <TableCell>{player.id}</TableCell>\r\n            </TableRow>\r\n        )\r\n\r\n        rows.push(firstRow);\r\ndebugger;\r\n        if(this.isExpanded(player)){\r\n            const detailRow = (\r\n                player.history.map( (history) => {\r\n                       return( <TableRow className=\"player-details\">\r\n                            <TableCell colSpan=\"4\" className=\"player-details\">\r\n                                <br/>\r\n                                <br/>\r\n                                <div className=\"attribute\">\r\n                                    <div className=\"attribute-name\">time used::</div>\r\n                                    <div className=\"attribute-value\">{history.time}</div>\r\n                                </div>\r\n                                <br/>\r\n                                <div className=\"attribute\">\r\n                                    <div className=\"attribute-name\">Light status:</div>\r\n                                    <div className=\"attribute-value\">{history.lightStatus.toString()}</div>\r\n                                </div>\r\n                                <br/>\r\n                                <div className=\"attribute\">\r\n                                    <div className=\"attribute-name\">Gas status:</div>\r\n                                    <div className=\"attribute-value\">{history.gasStatus.toString()}</div>\r\n                                </div>\r\n                                <br/>\r\n                            </TableCell>\r\n                        </TableRow>)\r\n                    })\r\n            );\r\n            rows.push(detailRow);\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    getPlayerTable = ()=>{\r\n        debugger\r\n        const playerRows = this.state.devicesHistory.map((player)=>{\r\n            return this.getRows(player);\r\n        });\r\n\r\n        return (\r\n            <Table style={{tableLayout: 'fixed'}} className=\"my-table\" >\r\n                    <TableHead>Device id</TableHead>\r\n                <TableBody>\r\n                    {playerRows}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Fragment>\r\n\r\n                <Paper  elevation={1}>\r\n                    <AppBar position=\"static\" color=\"default\">\r\n\r\n                        <Typography>\r\n                            Your Arduions history status:\r\n                        </Typography>\r\n                    </AppBar>\r\n\r\n                    <div style={{ overflow: 'auto', height: '300px' }}>\r\n                    {this.getPlayerTable()}\r\n                        </div>\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default statusHistory ;","import { connect } from 'react-redux'\r\nimport statusHistory from '../components/StatusHistory/StatusHistory'\r\nimport {statusDataFetched} from '../actions/statusHistory'\r\nimport {getStatusHistory} from '../serverapi';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.app.token,\r\n        ...state.statusHistory,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        getStatusHistory: (token) => {\r\n            console.log(\"token\" + token)\r\n            getStatusHistory(token).then(res => {\r\n                console.log(\"status history  loaded\")\r\n                console.log(res.data)\r\n                const devicesHistory = {devicesHistory : res.data};\r\n                dispatch(statusDataFetched(devicesHistory))\r\n            }).catch(err => {\r\n                console.error(\"status history loading failed\")\r\n                console.error(err)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(statusHistory)","export function statusDataFetched(data) {\r\n    return { type: \"STATUS_HISTORY_DATA_FETCHED\" , data: data }\r\n}","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport {Provider} from 'react-redux'\r\nimport {createStore} from 'redux'\r\nimport reducers from './reducers/'\r\nimport './App.css';\r\nimport StatusContainer from \"./containers/StatusContainer\";\r\nimport RegisterContainer from \"./containers/RegisterContainer\"\r\nimport LoginContainer from \"./containers/LoginContainer\"\r\nimport ArduionsListContainer from \"./containers/ArduionsListContainer\"\r\nimport statusHistory from \"./containers/StatusHistoryContainer.js\"\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport { Router, Route } from 'react-router-dom';\r\nimport history from './history'\r\n\r\n\r\nconst store = createStore(reducers)\r\nstore.subscribe(() => {\r\n    localStorage.setItem('TOKEN', store.getState().token)\r\n})\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: \"Montserrat\"\r\n    }\r\n});\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n            <Provider store={store}>\r\n                <div className=\"App\">\r\n                    <header className=\"App-header\">\r\n                        <Router history={history}>\r\n                            <Route path=\"/\" exact component={LoginContainer} />\r\n                            <Route path=\"/register\" component={RegisterContainer} />\r\n                            <Route path=\"/status\" component={StatusContainer} />\r\n                            <Route path=\"/arduionsList\" component={ArduionsListContainer} />\r\n                            <Route path=\"/statusHistory\" component={statusHistory} />\r\n                        </Router>\r\n                    </header>\r\n                </div>\r\n            </Provider>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}