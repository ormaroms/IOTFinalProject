{"version":3,"sources":["logo.svg","reducers/status.js","reducers/app.js","reducers/login.js","reducers/arduionsList.js","reducers/statusHistory.js","reducers/statisticsChart.js","reducers/index.js","components/CurrentStatus/CurrentStatus.css.js","history.js","components/CurrentStatus/CurrentStatus.js","serverapi/index.js","containers/StatusContainer.js","actions/status.js","components/Register/Register.css.js","components/Register/Register.js","containers/RegisterContainer.js","actions/register.js","components/Login/Login.css.js","components/Login/Login.js","containers/LoginContainer.js","actions/login.js","components/ArduinosList/ArduionsList.css.js","components/ArduinosList/ArduionsList.js","actions/arduionsList.js","containers/ArduionsListContainer.js","components/StatisticsChart/StatisticsChart.css.js","components/StatisticsChart/StatisticsChart.js","containers/StatisticsChartContainer.js","actions/statisticsChart.js","components/StatusHistory/StatusHistory.css.js","components/StatusHistory/StatusHistory.js","containers/StatusHistoryContainer.js","actions/statusHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","defaultState","lightStatus","gasStatus","arduinoID","token","localStorage","getItem","user_id","combineReducers","status","state","arguments","length","undefined","action","type","Object","assign","data","arduionsList","errorMsg","error","arduinoId","app","setItem","_id","login","statusHistory","statisticsChart","styles","theme","root","objectSpread","mixins","gutters","paddingBottom","spacing","unit","height","width","paddingRight","paddingLeft","rowForIndicators","display","header","paddingTop","backgroundColor","color","title","fontSize","fontWeight","date","marginBottom","textAlign","marginLeft","fontFamily","inidcatorSection","marginTop","formControl","margin","createBrowserHistory","CurrentStatus","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","currentTime","_this2","getStatus","days","months","setInterval","Date","setState","getDay","getDate","getMonth","getFullYear","toLocaleTimeString","_this$props","classes","history","push","react_default","a","createElement","react","key","index_es","className","elevation","AppBar_default","position","component","Info_default","control","checked","value","label","labelPlacement","Component","withStyles","SERVER","getStatusHistory","id","axios","get","headers","authorization","Content-Type","connect","ownProps","match","params","dispatch","userId","console","log","then","res","currArduinoStatus","filter","catch","err","text","field","Register","handleSubmit","bind","assertThisInitialized","e","preventDefault","userName","password","email","name","test","String","toLowerCase","register","onSubmit","Grid_default","item","xs","variant","inputRef","el","ref","button","post","username","signUp","textDecoration","cursor","Login","nextProps","href","onClick","routeToRegister","response","message","addButton","marginRight","tableRows","maxHeight","overflowY","addDeviceTitle","float","ArduionsList","handleRouteToStatus","resetStatus","updateAdruinoId","handleAddRow","arduinoName","isNaN","addNewDevice","formElement","target","handleDeleteRow","deviceIdToDelete","deleteDevice","devices","getUserDevices","reset","logout","Timelapse_default","routeToStatusHistory","style","BarChart_default","routeToStatistics","ExitToApp_default","table","overflow","tableLayout","map","device","hover","scope","Delete_default","container","placeholder","Add_default","deviceActionSucceeded","newDeviceId","newDeviceName","deviceToDelete","delete","updateDevice","deviceToUpdateId","deviceNewName","put","chart","options","hAxis","vAxis","viewWindow","min","max","StatisticsChart","getStatistics","chartData","index_esm","chartType","weekStart","setDate","daysInWeek","counter","allStatuses","forEach","userArduinoStatuses","concat","statusTime","time","i","datTemp","shift","countTemp","role","getChartArray","StatusHistory","handleExpand","newExpandedRows","toConsumableArray","expandedRows","idxFound","allExpanded","findIndex","splice","isExpanded","find","expandAll","getRows","deviceHistory","rows","firstRow","Button","detailRow","colSpan","toString","getTable","devicesRow","devicesHistory","filteredDevices","currentDevice","currentHistory","filterByGasAndLight","store","createStore","reducers","subscribe","getState","createMuiTheme","typography","App","core_styles","es","react_router","path","exact","LoginContainer","RegisterContainer","StatusContainer","ArduionsListContainer","StatisticsChartContainer","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.435c9757.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","\r\n\r\nconst defaultState = {\r\n    lightStatus: false,\r\n    gasStatus: false,\r\n    arduinoID: \"1\",\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"STATUS_DATA_FETCHED\":\r\n            return Object.assign({}, action.data)\r\n        case \"STATUS_RESET\":\r\n            return Object.assign({})\r\n        default: return state\r\n    }\r\n}\r\n\r\n","const defaultState = {\r\n    token: localStorage.getItem('TOKEN'),\r\n    user_id: localStorage.getItem('USER_ID')\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"LOGIN_SUCCEEDED\":\r\n            localStorage.setItem('TOKEN', action.data.token);\r\n            localStorage.setItem('USER_ID', action.data._id);\r\n            return Object.assign({}, {user_id: action.data._id, token: action.data.token})\r\n        case \"LOGOUT\":\r\n            localStorage.setItem('TOKEN', undefined);\r\n            return Object.assign({}, {token: undefined})\r\n        default: return state\r\n    }\r\n}\r\n\r\n","const defaultState = {\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"LOGIN_FAILED\":\r\n            return Object.assign({},  {errorMsg: action.error})\r\n        case \"LOGIN_SUCCEEDED\":\r\n            return Object.assign({}, action.data)\r\n        default: return state\r\n    }\r\n}","\r\n\r\nconst defaultState = {\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"ARDUIONS_LIST_LOADED\":\r\n            return Object.assign({}, action.data)\r\n        case \"DEVICE_ACTION_SUCCEEDED\":\r\n            return Object.assign({}, action.data)\r\n        case \"DEVICE_ADDITION_FIELD\":\r\n            return Object.assign({}, {errorMsg: action.error})\r\n        case \"UPDATE_ARDUINO_ID\":\r\n            return Object.assign({}, {arduinoId: action.data})\r\n        default: return state\r\n    }\r\n}\r\n\r\n","\r\n\r\nconst defaultState = {\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"STATUS_HISTORY_DATA_FETCHED\":\r\n            return Object.assign({}, action.data)\r\n        default: return state\r\n    }\r\n}\r\n\r\n","const defaultState = {\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"STATISTICS_DATA_FETCHED\":\r\n            return Object.assign({}, action.data)\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport status from './status'\r\nimport app from './app'\r\nimport login from './login'\r\nimport arduionsList from './arduionsList'\r\nimport statusHistory from './statusHistory'\r\nimport statisticsChart from './statisticsChart'\r\n\r\n\r\nexport default combineReducers({status,arduionsList, app, login,statusHistory, statisticsChart})","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '350px',\r\n        width: '400px',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    rowForIndicators:{\r\n        display:\"-webkit-box\"\r\n    },\r\n    header: {\r\n      paddingTop: '10px',\r\n      backgroundColor: 'cornflowerblue',\r\n      color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    date:{\r\n        fontSize:\"18px\",\r\n        marginBottom: \"20px\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    arduinoID:{\r\n        fontSize:\"16px\",\r\n        color:\"#a28b8b\",\r\n        textAlign:\"left\",\r\n        marginLeft: \"30px\",\r\n        fontFamily: \"Montserrat\"\r\n    },\r\n    inidcatorSection:{\r\n        marginTop: \"20px\"\r\n    },\r\n        formControl: {\r\n            margin: theme.spacing.unit * 3,\r\n        },\r\n    \r\n    \r\n});\r\nexport default styles;","// history.js\r\nimport { createBrowserHistory } from 'history'\r\n\r\nexport default createBrowserHistory({\r\n    /* pass a configuration object here if needed */\r\n})","import React, { Component, Fragment } from 'react';\r\nimport {Paper,Switch, Radio,FormControl,FormLabel,FormControlLabel,FormGroup,Checkbox, Typography,FormHelperText } from '@material-ui/core';\r\nimport styles from './CurrentStatus.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Info from '@material-ui/icons/Info';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport history from '../../history'\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass CurrentStatus extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {currentTime: ''};\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getStatus(this.props.token, this.props.user_id, this.props.arduinoId);\r\n\r\n        var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        setInterval( () => {\r\n            var date = new Date();\r\n            this.setState({\r\n                currentTime : days[date.getDay()] + \", \" + date.getDate() + ' ' + months[date.getMonth()] +\r\n                    ' ' + date.getFullYear() + ', ' + date.toLocaleTimeString()\r\n            })\r\n        },1000)\r\n\r\n        setInterval(() => {\r\n            this.props.getStatus(this.props.token, this.props.user_id, this.props.arduinoId);\r\n        }, 10000)\r\n    }\r\n\r\n    render() {\r\n        const {lightStatus, gasStatus, arduinoId, classes} = this.props;\r\n\r\n        if (this.props.token === undefined || this.props.token === null || this.props.token === \"\") {\r\n            history.push('/')\r\n            return (<div></div>)\r\n        }\r\n        \r\n        return (\r\n            \r\n            <Fragment key={this.props.arduinoId}>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                            <Typography className={classes.title}>\r\n                                Current Status\r\n                            </Typography>\r\n                            <Typography className={classes.date}>\r\n                                { this.state.currentTime }\r\n                            </Typography>\r\n\r\n                    </AppBar>\r\n\r\n                    <p className={classes.arduinoID}>\r\n                        <b> Arduino Id : </b> {arduinoId} {gasStatus} {lightStatus}\r\n                    </p>\r\n\r\n\r\n                    <FormControl className={classes.inidcatorSection} component=\"fieldset\">\r\n                        <FormLabel component=\"legend\"> <Info/> Indicators</FormLabel>\r\n                        <FormGroup>\r\n\r\n\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Switch\r\n                                        checked={gasStatus || false}\r\n                                        value=\"Leaking\"\r\n                                    />\r\n                                }\r\n                                label=\"Gas Leaking \"\r\n                                labelPlacement=\"start\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Switch\r\n                                        checked={lightStatus || false}\r\n                                        value=\"Lit\"\r\n                                    />\r\n                                }\r\n                                label=\"Gas Lit \"\r\n                                labelPlacement=\"start\"\r\n                            />\r\n\r\n\r\n                        </FormGroup>\r\n                    </FormControl>\r\n\r\n                </Paper>\r\n            </Fragment>\r\n\r\n   \r\n        );\r\n    }\r\n}\r\n\r\nexport default  withStyles(styles)(CurrentStatus);\r\n","import axios from 'axios'\r\n\r\nconst SERVER = 'https://iot-gas-monitor.herokuapp.com'\r\n\r\nexport function getStatus(token, id) {\r\n    return axios.get(SERVER + '/status/' + id)//, {params: {token, id}})\r\n}\r\n\r\nexport function getUserDevices(token, id) { // The id need to be here\r\n    return axios.get(SERVER + '/devices/' + id, {\r\n        headers: {\r\n            'authorization' : 'Bearer '+token,\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    })\r\n}\r\nexport function getStatusHistory(token, id) {\r\n    debugger// The id need to be here\r\n    return axios.get(SERVER + '/status/getArduinoHistory/' + id, {\r\n        headers: {\r\n            'authorization' : 'Bearer '+token,\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport function addNewDevice(token, id, newDeviceId, newDeviceName) { // TODO: insert token\r\n    return axios.post(SERVER + '/devices/' + id, {\r\n        \"id\": newDeviceId,\r\n        \"name\": newDeviceName\r\n    }, {\r\n        headers: {\r\n            'authorization' : 'Bearer ' + token,\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\nexport function deleteDevice(token, id, deviceToDelete) { // TODO: insert token\r\n    return axios.delete(SERVER + '/devices/' + id,  {\r\n        headers: {\r\n            'authorization' : 'Bearer ' + token,\r\n            'Content-Type': 'application/json'\r\n        },\r\n        data: {\r\n            'arduinoId': deviceToDelete\r\n        }\r\n    })\r\n}\r\n\r\nexport function updateDevice(token, deviceToUpdateId, deviceNewName) { // TODO: insert token\r\n    return axios.put(SERVER + '/devices/' + '5caba627e4b63200044dc316', {\r\n        \"id\": deviceToUpdateId,\r\n        \"name\": deviceNewName\r\n    }, {\r\n        headers: {\r\n            'authorization' : 'Bearer ' + token,\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\nexport function login(userName, password)\r\n{\r\n    return axios.post(SERVER + '/users/authenticate', {\r\n        \"username\": userName,\r\n        \"password\": password\r\n    }, {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\n export function register(userName, password, name, email)\r\n {\r\n     return axios.post(SERVER + '/users/register', {\r\n         \"username\": userName,\r\n         \"password\": password,\r\n         \"name\": name,\r\n         \"email\": email\r\n     }, {\r\n     headers: {\r\n         'Content-Type': 'application/json'\r\n     }\r\n })\r\n }\r\n","import { connect } from 'react-redux'\r\nimport CurrentStatus from '../components/CurrentStatus/CurrentStatus'\r\nimport {statusDataFetched} from '../actions/status'\r\nimport {getStatus} from '../serverapi/'\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        token: state.app.token,\r\n        user_id: state.app.user_id,\r\n        arduinoId: ownProps.match.params.id,\r\n        ...state.status,\r\n        ...state.login,\r\n        ...state.arduionsList\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        getStatus: (token, userId, arduinoId) => {\r\n            console.log(\"Asked status for \" + arduinoId + \" arduino\");\r\n            getStatus(token, userId).then(res => {\r\n               let currArduinoStatus =\r\n                   res.data.filter(function(status){return status.id == arduinoId});\r\n\r\n                if (currArduinoStatus.length > 0) {\r\n                    console.log(\"Status data fetched for arduino \"+ arduinoId)\r\n                    dispatch(statusDataFetched(currArduinoStatus[0]))\r\n                } else {\r\n                    console.log(\"Couldnt find status for arduino \"+ arduinoId)\r\n                }\r\n\r\n            }).catch(err => {\r\n                console.error(\"Status data fetched failed\")\r\n                console.error(err)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentStatus)","\r\n\r\nexport function statusDataFetched(data) {\r\n    return { type: \"STATUS_DATA_FETCHED\" , data: data }\r\n}\r\n\r\nexport function resetStatus() {\r\n    return { type: \"STATUS_RESET\"}\r\n}","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '370px',\r\n        width: '400px',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    text:{\r\n        fontSize:\"16px\",\r\n        color:\"black\",\r\n        // fontFamily: \"Montserrat\"\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n        fontSize: \"18px\",\r\n        margin: \"5px\"\r\n    },\r\n    field: {\r\n        margin: \"5px\"\r\n    }\r\n});\r\nexport default styles;","import React, { Component, Fragment } from 'react';\r\nimport styles from './Register.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Button, TextField, FormControl, FormLabel, Paper, Typography} from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass Register extends Component {\r\n\r\n\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {errorMsg: \"\"};\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n\r\n        let userName = this.userName.value;\r\n        let password = this.password.value;\r\n        let email = this.email.value;\r\n        let name = this.name.value;\r\n        var emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n        if (userName == '' || password == '' || email == '' || name == '' ) {\r\n            this.setState({errorMsg: \"Field can not be empty\"})\r\n        } else if (!emailRegex.test(String(email).toLowerCase())) {\r\n            this.setState({errorMsg: \"Email adress is not valid\"})\r\n        }\r\n        else {\r\n            this.props.register(this.userName.value, this.password.value, this.name.value, this.email.value);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                        <Typography className={classes.title}>\r\n                            Register\r\n                        </Typography>\r\n                    </AppBar>\r\n\r\n                    <div className=\"Login\">\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"name\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Name\"\r\n                                    inputRef={el => this.name = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"email\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"Email\"\r\n                                    inputRef={el => this.email = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"userName\"\r\n                                    variant=\"outlined\"\r\n                                    label=\"User Name\"\r\n                                    inputRef={el => this.userName = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField ref='password'\r\n                                           type=\"password\"\r\n                                           variant=\"outlined\"\r\n                                           inputRef={el => this.password = el}\r\n                                           label=\"Password\"/>\r\n                            </Grid>\r\n\r\n                            <p className={classes.error}>{this.state.errorMsg}</p>\r\n\r\n                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                                Create account\r\n                            </Button>\r\n                        </form>\r\n                    </div>\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Register);\r\n","import { connect } from 'react-redux'\r\nimport Register from '../components/Register/Register'\r\nimport {register} from \"../serverapi\";\r\nimport {RegisterSuccceeded, RegisterFailed} from \"../actions/register\";\r\nimport history from '../history'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ...state.register\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        register: (userName, password, name, email) => {\r\n            register(userName, password, name, email).then(res => {\r\n                console.log(\"User register succeeded\")\r\n                dispatch(RegisterSuccceeded(res.data))\r\n                history.push('/');\r\n            }).catch(err => {\r\n                console.error(\"User register failed\")\r\n                dispatch(RegisterFailed(err))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register)","\r\nexport function RegisterSuccceeded(data) {\r\n    return { type: \"REGISTER_SUCCEEDED\" , data: data }\r\n}\r\n\r\nexport function RegisterFailed (error) {\r\n    return { type: \"REGISTER_FAILED\" , error: error }\r\n}","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '370px',\r\n        width: '400px',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    text:{\r\n        fontSize:\"16px\",\r\n        color:\"black\",\r\n        // fontFamily: \"Montserrat\"\r\n    },\r\n    signUp: {\r\n        textDecoration: \"underline\",\r\n        cursor: \"pointer\"\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n        fontSize: \"18px\",\r\n        margin: \"5px\"\r\n    },\r\n    field: {\r\n        margin: \"10px\"\r\n    }\r\n});\r\nexport default styles;","import React, { Component, Fragment } from 'react';\r\nimport styles from './Login.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Button, TextField, FormControl, FormLabel, Paper, Typography} from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport history from '../../history'\r\nimport {login} from \"../../serverapi\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass Login extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {errorMsg: \"\"};\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        let userName = this.userName.value;\r\n        let password = this.password.value;\r\n\r\n        if (userName == '' || password == '') {\r\n            this.setState({errorMsg: \"Field can not be empty\"})\r\n        } else {\r\n            this.props.login(this.userName.value, this.password.value);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({errorMsg: nextProps.errorMsg})\r\n    }\r\n\r\n    routeToRegister() {\r\n        history.push('register')\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                        <Typography className={classes.title}>\r\n                            Log In\r\n                        </Typography>\r\n                    </AppBar>\r\n\r\n                    <FormControl>\r\n\r\n\r\n                    </FormControl>\r\n                    <div className=\"Login\">\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField\r\n                                    id=\"userName\"\r\n                                    //className={classNames(classes.margin, classes.textField)}\r\n                                    variant=\"outlined\"\r\n                                    label=\"User Name\"\r\n                                    inputRef={el => this.userName = el}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} className={classes.field}>\r\n                                <TextField ref='password'\r\n                                           type=\"password\"\r\n                                           variant=\"outlined\"\r\n                                           inputRef={el => this.password = el}\r\n                                           label=\"Password\"\r\n                                />\r\n                            </Grid>\r\n\r\n                                <p className={classes.error}>{this.state.errorMsg}</p>\r\n\r\n                            <Grid item xs={12}>\r\n                                <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                                    Log In\r\n                                </Button>\r\n                            </Grid>\r\n                        </form>\r\n\r\n                        <p className={classes.text}>\r\n                            Dont have an account yet? <a href className={classes.signUp} onClick={this.routeToRegister}> Sign up </a>\r\n                        </p>\r\n                    </div>\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Login);\r\n","import { connect } from 'react-redux'\r\nimport Login from '../components/Login/Login'\r\nimport {LoginSuccceeded, LoginFailed} from '../actions/login'\r\nimport {login} from '../serverapi/'\r\nimport history from '../history'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n\r\n    return {\r\n        ...state.login\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: (userName, password) => {\r\n            login(userName, password).then(res => {\r\n                console.log(\"User login succeeded\")\r\n                dispatch(LoginSuccceeded(res.data))\r\n                history.push('/device_list')\r\n            }).catch(err => {\r\n                console.error(\"User login failed\")\r\n                console.error(err)\r\n                dispatch(LoginFailed(err.response.data.message))\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","\r\nexport function LoginSuccceeded(data) {\r\n    return { type: \"LOGIN_SUCCEEDED\" , data: data }\r\n}\r\n\r\nexport function Logout() {\r\n    return { type: \"LOGOUT\" }\r\n}\r\n\r\nexport function LoginFailed (error) {\r\n    return { type: \"LOGIN_FAILED\" , error: error }\r\n}","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '350px',\r\n        width: '400px',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    text:{\r\n        fontSize:\"16px\",\r\n        color:\"black\",\r\n        // fontFamily: \"Montserrat\"\r\n    },\r\n    signUp: {\r\n        textDecoration: \"underline\",\r\n        cursor: \"pointer\"\r\n    },\r\n    addButton: {\r\n        color: \"cornflowerblue\",\r\n        cursor: \"pointer\",\r\n        marginRight: \"80px\"\r\n    },\r\n    tableRows: {\r\n        height: '100px',\r\n        maxHeight: '100px',\r\n        overflowY: 'scroll'\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n        fontSize: \"18px\",\r\n        margin: \"5px\"\r\n    },\r\n    addDeviceTitle: {\r\n        fontSize: \"18px\",\r\n        color: \"darkslategray\",\r\n        float: \"left\",\r\n        marginLeft: \"20px\",\r\n        marginBottom: \"0px\",\r\n        fontFamily: \"Montserrat\"\r\n\r\n    }\r\n});\r\nexport default styles;","import React, {Component, Fragment} from 'react';\r\nimport styles from './ArduionsList.css'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    Typography,\r\n    TextField,\r\n    Button\r\n} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport history from '../../history';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddCircle from '@material-ui/icons/Add';\r\nimport BarChart from '@material-ui/icons/BarChart';\r\nimport Timelapse from '@material-ui/icons/Timelapse';\r\nimport LogoutIcon from '@material-ui/icons/ExitToApp';\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass ArduionsList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getUserDevices(this.props.token, this.props.user_id);\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            errorMsg: \"\",\r\n            devices: []\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errorMsg) {\r\n            this.setState({errorMsg: nextProps.errorMsg});\r\n        } else if (nextProps.devices) {\r\n            if (this.state.formElement) {\r\n                this.state.formElement.reset();\r\n            }\r\n            this.setState({devices: nextProps.devices, errorMsg: \"\"});\r\n        }\r\n    }\r\n\r\n    handleRouteToStatus = (arduinoId) => { // redirect to Status\r\n        this.props.resetStatus()\r\n        this.props.updateAdruinoId(arduinoId);\r\n    };\r\n\r\n    routeToStatusHistory() {\r\n        history.push('status_history')\r\n    }\r\n    routeToStatistics() {\r\n        history.push('statistics_chart')\r\n    }\r\n\r\n    logout() {\r\n        this.props.logout()\r\n        history.push('')\r\n    }\r\n\r\n    handleAddRow = (e) => {\r\n        e.preventDefault();\r\n        \r\n\r\n        let arduinoId = this.id.value;\r\n        let arduinoName = this.name.value;\r\n\r\n        if (arduinoId == '' || arduinoName == '') {\r\n            this.setState({errorMsg: \"Field can not be empty\"})\r\n        } else if (isNaN(arduinoId)) {\r\n            this.setState({errorMsg: \"Device id field must contain only numbers\"})\r\n        } else {\r\n            this.props.addNewDevice(this.props.token,this.props.user_id,\r\n                this.id.value, this.name.value);\r\n            this.setState({formElement: e.target})\r\n        }\r\n    };\r\n\r\n    handleDeleteRow = (deviceIdToDelete) => {\r\n        this.props.deleteDevice(this.props.token,this.props.user_id, deviceIdToDelete);\r\n    };\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        const {classes, devices} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n                        <Typography className={classes.title}>\r\n                            Your Devices\r\n                        </Typography>\r\n                        <div>\r\n                            <Timelapse onClick={this.routeToStatusHistory} style={{float: 'right'}}/>\r\n                            <BarChart onClick={this.routeToStatistics} style={{float: 'right'}}/>\r\n                            <LogoutIcon onClick={this.logout.bind(this)} style={{float: 'right'}}/>\r\n                        </div>\r\n                    </AppBar>\r\n                    <Table className={classes.table}>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Arduino Id</TableCell>\r\n                                <TableCell>Name</TableCell>\r\n                                <TableCell></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                    </Table>\r\n\r\n                    <div style={{overflow: 'auto', height: '100px'}}>\r\n                        <Table style={{tableLayout: 'fixed'}}>\r\n                            <TableBody className={classes.tableRows}>\r\n\r\n                                {this.state.devices && this.state.devices.map((device) => {\r\n                                    return (\r\n                                        <TableRow key={device.id} hover >\r\n                                            <TableCell component=\"th\" scope=\"row\" onClick={() => this.handleRouteToStatus(device.id)}>\r\n                                                {device.id}\r\n                                            </TableCell>\r\n                                            <TableCell onClick={() => this.handleRouteToStatus(device.id)}>{device.name}</TableCell>\r\n                                            <TableCell><DeleteIcon\r\n                                                onClick={() => this.handleDeleteRow(device.id)}/></TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </div>\r\n                    <p className={classes.addDeviceTitle}>Add device</p>\r\n                    <form onSubmit={this.handleAddRow}>\r\n                        <Grid container spacing={24}>\r\n                            <Grid item xs={5}>\r\n                                <TextField\r\n                                    id=\"id\"\r\n                                    // type=\"number\"\r\n                                    placeholder=\"Arduino Id\"\r\n                                    inputRef={el => this.id = el}\r\n                                    style={{width: 95}}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={5}>\r\n                                <TextField\r\n                                    id=\"name\"\r\n                                    placeholder=\"Name\"\r\n                                    inputRef={el => this.name = el}\r\n                                    style={{width: 100}}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                                <Button type=\"submit\">\r\n                                    <AddCircle className={classes.addButton}/>\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n\r\n                    <p className={classes.error}>{this.state.errorMsg}</p>\r\n\r\n                    {/*<AddCircle className={classes.addButton} onClick={this.handleAddRow}/>*/}\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(ArduionsList);\r\n","\r\n\r\nexport function arduionsListLoaded(data) {\r\n    return { type: \"ARDUIONS_LIST_LOADED\" , data: data }\r\n}\r\nexport function updateAdruinoId(data) {\r\n    return { type: \"UPDATE_ARDUINO_ID\" , data: data }\r\n}\r\nexport function deviceActionSucceeded(data) {\r\n    return { type: \"DEVICE_ACTION_SUCCEEDED\" , data: data }\r\n}\r\n\r\nexport function deviceAdditoinField(error) {\r\n    return { type: \"DEVICE_ADDITION_FIELD\" , error: error }\r\n}\r\n\r\n","import { connect } from 'react-redux'\r\nimport ArduionsList from '../components/ArduinosList/ArduionsList'\r\nimport {arduionsListLoaded, deviceActionSucceeded, deviceAdditoinField, updateAdruinoId} from '../actions/arduionsList'\r\nimport {resetStatus} from '../actions/status'\r\nimport {getUserDevices, addNewDevice, deleteDevice, updateDevice} from '../serverapi';\r\nimport {Logout} from '../actions/login'\r\nimport history from '../history';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.app.token,\r\n        user_id: state.app.user_id,\r\n        ...state.arduionsList,\r\n        ...state.login\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        logout: () => {\r\n            console.log(\"Logged out\")\r\n            dispatch(Logout())\r\n        },\r\n\r\n        resetStatus: () => {\r\n            dispatch(resetStatus())\r\n        },\r\n\r\n        getUserDevices: (token, id) => {\r\n            console.log(\"token\" + token)\r\n            getUserDevices(token, id).then(res => {\r\n                console.log(\"User devices loaded\")\r\n                dispatch(arduionsListLoaded(res.data))\r\n            }).catch(err => {\r\n                console.error(\"User devices load failed\")\r\n                console.error(err)\r\n            })\r\n        },\r\n        updateAdruinoId: (id) => {\r\n            dispatch(updateAdruinoId(id));\r\n            history.push('/device_status/' + id)\r\n        },\r\n        addNewDevice: (token, id, newDeviceId, newDeviceName) => {\r\n            addNewDevice(token, id, newDeviceId, newDeviceName).then(res => {\r\n               console.log(\"Device with id \" + newDeviceId + \" was added successfully.\")\r\n                dispatch(deviceActionSucceeded(res.data));\r\n            }).catch(err => {\r\n                console.log(\"Error in device addition with id \" + newDeviceId);\r\n                console.log(err.response);\r\n                dispatch(deviceAdditoinField(err.response.data.message));\r\n            })\r\n        },\r\n        deleteDevice: (token, id, deviceToDelete) => {\r\n            deleteDevice(token, id, deviceToDelete).then(res => {\r\n                console.log(\"Delete device with id \" + deviceToDelete + \" succeeded.\")\r\n                dispatch(deviceActionSucceeded(res.data));\r\n                }\r\n            ).catch(error => {\r\n                console.log(\"Error in deleting device with id \" + deviceToDelete);\r\n                console.log(error)\r\n            })\r\n        },\r\n        updateDevice: (token, deviceToUpdateId, deviceNewName) => {\r\n            updateDevice(token, deviceToUpdateId, deviceNewName).then(res => {\r\n                console.log(\"Device with id \" + deviceToUpdateId + \" was updated successfully.\")\r\n                dispatch(deviceActionSucceeded(res.data));\r\n            }).catch(err => {\r\n                console.log(\"Error in device updating with id \" + deviceToUpdateId);\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ArduionsList)","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '370px',\r\n        width: '400px',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    chart: {\r\n        width: \"100%\",\r\n        height: \"300px\"\r\n    }\r\n});\r\nexport default styles;","import React, { Component, Fragment } from 'react';\r\nimport styles from './StatisticsChart.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Button, TextField, FormControl, FormLabel, Paper, Typography} from '@material-ui/core';\r\nimport Chart from \"react-google-charts\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\n\r\nconst options = {\r\n    hAxis: {title: \"Days\"},\r\n    vAxis: {title: \"Times\",viewWindow: {min:0, max:10}}\r\n}\r\n\r\nclass StatisticsChart extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getStatistics(this.props.token, this.props.user_id);\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n    render() {\r\n        const {classes, chartData} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                        <Typography className={classes.title}>\r\n                            Statistics\r\n                        </Typography>\r\n                    </AppBar>\r\n                    <div>\r\n                        <Chart className= {classes.chart}\r\n                               chartType=\"ColumnChart\"\r\n                               data={chartData}\r\n                               options={options}\r\n                        />\r\n                    </div>\r\n                </Paper>\r\n            </Fragment>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(StatisticsChart);\r\n","import { connect } from 'react-redux'\r\nimport StatisticsChart from '../components/StatisticsChart/StatisticsChart'\r\nimport {StatisticsDataFetched} from '../actions/statisticsChart'\r\nimport {getStatusHistory} from '../serverapi';\r\nimport history from '../history';\r\n\r\nconst mapStateToProps = state => {\r\n    debugger;\r\n    return {\r\n        token: state.app.token,\r\n        user_id: state.app.user_id,\r\n        ...state.arduionsList,\r\n        ...state.login,\r\n        ...state.statisticsChart\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        getStatistics: (token, id) => {\r\n            getStatusHistory(token, id).then(res => {\r\n                debugger;\r\n                let chartData = getChartArray(res.data);\r\n                dispatch(StatisticsDataFetched({chartData: chartData}))\r\n            }).catch(err => {\r\n                console.error(\"User devices load failed\")\r\n                console.error(err)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nfunction getChartArray(data) {\r\ndebugger;\r\n    var weekStart = new Date();\r\n    weekStart.setDate(weekStart.getDate() -7)\r\n\r\n    let daysInWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday','Saturday'];\r\n    let counter = [0,0,0,0,0,0,0];\r\n\r\n    // Create array of all statuses\r\n    let allStatuses = [];\r\n    data.forEach(function(userArduinoStatuses){\r\n        allStatuses = allStatuses.concat(userArduinoStatuses.history)\r\n    });\r\n\r\n    // Running over the statuses\r\n    allStatuses.forEach(function(status){\r\n        let statusTime = new Date(status.time)\r\n        // Check if the status is relavant\r\n        if(statusTime > weekStart) {\r\n            if (status.gasStatus){\r\n                counter[statusTime.getDay()]++;\r\n            }\r\n        }\r\n    })\r\n\r\n    // Shift days order\r\n    for (let i = 0; i < new Date().getDay() + 1; i++){\r\n        let datTemp = daysInWeek.shift();\r\n        let countTemp = counter.shift();\r\n        daysInWeek.push(datTemp);\r\n        counter.push(countTemp)\r\n    }\r\n\r\n\r\n\r\n    let options =  [\r\n        [\"Element\", \"Count\", { role: \"style\" }],\r\n    ];\r\n\r\n    // Create the array for the chart\r\n    for (let i = 0; i < 7; i++) {\r\n        options.push( [daysInWeek[i], counter[i], \"blue\"]);\r\n    }\r\n\r\n    return options;\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StatisticsChart)","\r\nexport function StatisticsDataFetched(data) {\r\n    return { type: \"STATISTICS_DATA_FETCHED\" , data: data }\r\n}\r\n","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '350px',\r\n        width: '400px',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    header: {\r\n        paddingTop: '10px',\r\n        backgroundColor: 'cornflowerblue',\r\n        color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    text:{\r\n        fontSize:\"16px\",\r\n        color:\"black\",\r\n        // fontFamily: \"Montserrat\"\r\n    },\r\n    signUp: {\r\n        textDecoration: \"underline\",\r\n        cursor: \"pointer\"\r\n    }\r\n});\r\nexport default styles;","import React, { Component, Fragment } from 'react';\r\nimport styles from './StatusHistory.css'\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Table, TableBody, TableCell, TableHead, TableRow, Paper, Typography, TextField} from '@material-ui/core';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport history from '../../history';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Button from \"@material-ui/core/es/Button/Button\";\r\nimport BarChart from \"@material-ui/core/SvgIcon/SvgIcon\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\n\r\n\r\nclass StatusHistory extends Component{\r\n    componentDidMount() {\r\n        this.props.getStatusHistory(this.props.token,this.props.user_id);\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {expandedRows: [],\r\n            devicesHistory: []\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        debugger;\r\n        if (nextProps.devicesHistory){\r\n            if (this.state.formElement) {\r\n                this.state.formElement.reset();\r\n            }\r\n\r\n            this.setState({ devicesHistory: nextProps.devicesHistory});\r\n        }\r\n    }\r\n\r\n\r\n    handleExpand = (statusHistory) =>{\r\n        debugger;\r\n        let newExpandedRows = [...this.state.expandedRows];\r\n        let allExpanded = this.state.allExpanded;\r\n        let idxFound = newExpandedRows.findIndex((id)=>{\r\n            return id === statusHistory.id;\r\n        });\r\n\r\n        if(idxFound > -1){\r\n            console.log(\"Collapsing \" + statusHistory.id + \" \" + idxFound);\r\n            newExpandedRows.splice(idxFound, 1);\r\n        }\r\n        else{\r\n            console.log(\"Expanding \" + statusHistory.id);\r\n            newExpandedRows.push(statusHistory.id);\r\n        }\r\n\r\n        console.log(\"Expanded rows\");\r\n        console.log(newExpandedRows);\r\n\r\n        this.setState({expandedRows: [...newExpandedRows]});\r\n    }\r\n\r\n    isExpanded = (statusHistory)=>{\r\n        const idx = this.state.expandedRows.find(\r\n            (id)=>{\r\n                return id === statusHistory.id;\r\n            }\r\n        );\r\n\r\n        return idx > -1;\r\n    }\r\n\r\n    expandAll=(devices)=>{\r\n        console.log(\"ExapndedRows: \" + this.state.expandedRows.length);\r\n        console.log(\"devices:      \" + devices.length);\r\n        if(this.state.expandedRows.length === devices.length){\r\n\r\n            let newExpandedRows = [];\r\n            this.setState({expandedRows: [...newExpandedRows]});\r\n            console.log(\"Collapsing all...\");\r\n        }\r\n        else{\r\n            let newExpandedRows = devices.map(\r\n                statusHistory => statusHistory.history.arduinoId\r\n            );\r\n            this.setState({expandedRows: [...newExpandedRows]});\r\n            console.log(\"Expanding all...\");\r\n            console.log(\"Expanded rows \" + newExpandedRows.length)\r\n        }\r\n    }\r\n\r\n    getRows = (deviceHistory)=>{\r\n\r\n        let rows = [];\r\n\r\n        const firstRow = (\r\n            <TableRow onClick={()=>this.handleExpand(deviceHistory)}>\r\n                <TableCell >\r\n                    <Button>\r\n                        {this.isExpanded(deviceHistory) ? \"-\" : \"+\"}\r\n                    </Button>\r\n                </TableCell>\r\n                <TableCell>{deviceHistory.id}</TableCell>\r\n            </TableRow>\r\n        )\r\n\r\n        rows.push(firstRow);\r\ndebugger;\r\n        if(this.isExpanded(deviceHistory)){\r\n            const detailRow = (\r\n                deviceHistory.history.map( (history) => {\r\n                       return( <TableRow >\r\n                            <TableCell colSpan=\"4\" >\r\n                                <br/>\r\n                                <br/>\r\n                                <div className=\"attribute\">\r\n                                    <div className=\"attribute-name\">time used::</div>\r\n                                    <div className=\"attribute-value\">{history.time}</div>\r\n                                </div>\r\n                                <br/>\r\n                                <div className=\"attribute\">\r\n                                    <div className=\"attribute-name\">Light status:</div>\r\n                                    <div className=\"attribute-value\">{history.lightStatus.toString()}</div>\r\n                                </div>\r\n                                <br/>\r\n                                <div className=\"attribute\">\r\n                                    <div className=\"attribute-name\">Gas status:</div>\r\n                                    <div className=\"attribute-value\">{history.gasStatus.toString()}</div>\r\n                                </div>\r\n                                <br/>\r\n                            </TableCell>\r\n                        </TableRow>)\r\n                    })\r\n            );\r\n            rows.push(detailRow);\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    getTable = ()=>{\r\n        debugger\r\n        const devicesRow = this.state.devicesHistory.map((device)=>{\r\n            return this.getRows(device);\r\n        });\r\n\r\n        return (\r\n            <Table style={{tableLayout: 'fixed'}} className=\"my-table\" >\r\n                <TableBody>\r\n                    {devicesRow}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const {classes} = this.props;\r\n        return (\r\n            <Fragment>\r\n\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n                        <Typography>\r\n                            Your Arduions history\r\n                        </Typography>\r\n                    </AppBar>\r\n                    <div style={{overflow: 'auto', height: '300px'}}>\r\n                    {this.getTable()}\r\n                    </div>\r\n\r\n                </Paper>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(StatusHistory) ;","import { connect } from 'react-redux'\r\nimport statusHistory from '../components/StatusHistory/StatusHistory'\r\nimport {statusDataFetched} from '../actions/statusHistory'\r\nimport {getStatusHistory} from '../serverapi';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.app.token,\r\n        user_id: state.app.user_id,\r\n        ...state.statusHistory,\r\n        ...state.login\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n    return {\r\n        getStatusHistory: (token,id) => {\r\n            console.log(\"token\" + token)\r\n            getStatusHistory(token,id).then(res => {\r\n                console.log(\"status history  loaded\")\r\n                console.log(res.data)\r\n\r\n                function  filterByGasAndLight() {\r\n                    let filteredDevices = []\r\n                    res.data.forEach(function (currentDevice) {\r\n                        let currentHistory;\r\n                        currentHistory = currentDevice.history.filter(currentHistory => {\r\n                            if (currentHistory.gasStatus === true || currentHistory.lightStatus === true) {\r\n                                return currentHistory\r\n                            }\r\n                        });\r\n                        if (currentHistory.length > 0) {\r\n                            filteredDevices.push(currentDevice)\r\n                        }\r\n                    })\r\n                    return filteredDevices;\r\n                }\r\n\r\n                const devicesHistory = {devicesHistory : filterByGasAndLight()};\r\n                dispatch(statusDataFetched(devicesHistory))\r\n            }).catch(err => {\r\n                console.error(\"status history loading failed\")\r\n                console.error(err)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(statusHistory)","export function statusDataFetched(data) {\r\n    return { type: \"STATUS_HISTORY_DATA_FETCHED\" , data: data }\r\n}","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport {Provider} from 'react-redux'\r\nimport {createStore} from 'redux'\r\nimport reducers from './reducers/'\r\nimport './App.css';\r\nimport StatusContainer from \"./containers/StatusContainer\";\r\nimport RegisterContainer from \"./containers/RegisterContainer\"\r\nimport LoginContainer from \"./containers/LoginContainer\"\r\nimport ArduionsListContainer from \"./containers/ArduionsListContainer\"\r\nimport StatisticsChartContainer from \"./containers/StatisticsChartContainer\"\r\nimport statusHistory from \"./containers/StatusHistoryContainer.js\"\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport { Router, Route } from 'react-router-dom';\r\nimport history from './history'\r\n\r\n\r\nconst store = createStore(reducers)\r\nstore.subscribe(() => {\r\n    localStorage.setItem('TOKEN', store.getState().app.token)\r\n    localStorage.setItem('USER_ID', store.getState().app.user_id)\r\n})\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: \"Montserrat\"\r\n    }\r\n});\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n            <Provider store={store}>\r\n                <div className=\"App\">\r\n                    <header className=\"App-header\">\r\n                        <Router history={history}>\r\n                            <Route path=\"/\" exact component={LoginContainer} />\r\n                            <Route path=\"/register\" component={RegisterContainer} />\r\n                            <Route path=\"/device_status/:id\" component={StatusContainer} />\r\n                            <Route path=\"/device_list\" component={ArduionsListContainer} />\r\n                            <Route path=\"/status_history\" component={statusHistory} />\r\n                            <Route path=\"/statistics_chart\" component={StatisticsChartContainer} />\r\n                        </Router>\r\n                    </header>\r\n                </div>\r\n            </Provider>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}