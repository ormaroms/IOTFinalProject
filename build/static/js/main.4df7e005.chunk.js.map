{"version":3,"sources":["logo.svg","reducers/status.js","reducers/index.js","components/CurrentStatus/CurrentStatus.css.js","components/CurrentStatus/CurrentStatus.js","serverapi/index.js","containers/StatusContainer.js","actions/status.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","defaultState","lightStatus","gasStatus","arduinoID","combineReducers","status","state","arguments","length","undefined","action","type","Object","assign","data","styles","theme","root","objectSpread","mixins","gutters","paddingBottom","spacing","unit","height","width","paddingRight","paddingLeft","rowForIndicators","display","header","paddingTop","backgroundColor","color","title","fontSize","fontWeight","date","marginBottom","textAlign","marginLeft","fontFamily","inidcatorSection","marginTop","formControl","margin","CurrentStatus","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","currentTime","_this2","getStatus","days","months","setInterval","Date","setState","getDay","getDate","getMonth","getFullYear","toLocaleTimeString","_this$props","classes","react_default","a","createElement","react","index_es","className","elevation","AppBar_default","position","component","Info_default","control","checked","value","label","labelPlacement","Component","withStyles","SERVER","connect","dispatch","id","axios","get","params","then","res","console","log","catch","err","error","store","createStore","reducers","createMuiTheme","typography","App","core_styles","es","StatusContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4df7e005.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","\r\n\r\nconst defaultState = {\r\n    lightStatus: false,\r\n    gasStatus: false,\r\n    arduinoID: \"Kitchen arduino\",\r\n}\r\n\r\nexport default function reduce(state = defaultState, action) {\r\n    switch (action.type) {\r\n        case \"STATUS_DATA_FETCHED\":\r\n            return Object.assign({}, action.data)\r\n        default: return state\r\n    }\r\n}\r\n\r\n","import { combineReducers } from 'redux'\r\nimport status from './status'\r\n\r\nexport default combineReducers({status})","const styles = theme => ({\r\n    root: {\r\n        ...theme.mixins.gutters(),\r\n        // paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n        height: '350px',\r\n        width: '400px',\r\n        paddingRight: '0px !important',\r\n        paddingLeft: '0px !important'\r\n    },\r\n    rowForIndicators:{\r\n        display:\"-webkit-box\"\r\n    },\r\n    header: {\r\n      paddingTop: '10px',\r\n      backgroundColor: 'cornflowerblue',\r\n      color: 'whitesmoke !important'\r\n    },\r\n    title:{\r\n        fontSize: \"35px\",\r\n        fontWeight: \"bold\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    date:{\r\n        fontSize:\"18px\",\r\n        marginBottom: \"20px\",\r\n        color: \"whitesmoke\"\r\n    },\r\n    arduinoID:{\r\n        fontSize:\"16px\",\r\n        color:\"#a28b8b\",\r\n        textAlign:\"left\",\r\n        marginLeft: \"30px\",\r\n        fontFamily: \"Montserrat\"\r\n    },\r\n    inidcatorSection:{\r\n        marginTop: \"20px\"\r\n    },\r\n        formControl: {\r\n            margin: theme.spacing.unit * 3,\r\n        },\r\n    \r\n    \r\n});\r\nexport default styles;","import React, { Component, Fragment } from 'react';\r\nimport {Paper,Switch, Radio,FormControl,FormLabel,FormControlLabel,FormGroup,Checkbox, Typography,FormHelperText } from '@material-ui/core';\r\nimport styles from './CurrentStatus.css'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Info from '@material-ui/icons/Info';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n// This is the current status component\r\n// Will get the isLit isGasLeaking arduinoID from the props! ( in the future, after the POC) *propTypes\r\n\r\nclass CurrentStatus extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {currentTime: ''};\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getStatus(this.props.arduinoID);\r\n\r\n        var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        setInterval( () => {\r\n            var date = new Date();\r\n            this.setState({\r\n                currentTime : days[date.getDay()] + \", \" + date.getDate() + ' ' + months[date.getMonth()] +\r\n                    ' ' + date.getFullYear() + ', ' + date.toLocaleTimeString()\r\n            })\r\n        },1000)\r\n    }\r\n\r\n    render() {\r\n        const {lightStatus, gasStatus, arduinoID, classes} = this.props;\r\n        \r\n        return (\r\n            \r\n            <Fragment>\r\n                <Paper className={classes.root} elevation={1}>\r\n                    <AppBar className={classes.header} position=\"static\" color=\"default\">\r\n\r\n                            <Typography className={classes.title}>\r\n                                Current Status\r\n                            </Typography>\r\n                            <Typography className={classes.date}>\r\n                                { this.state.currentTime }\r\n                            </Typography>\r\n\r\n                    </AppBar>\r\n\r\n                    <p className={classes.arduinoID}>\r\n                        <b> Arduino Id : </b> {arduinoID}\r\n                    </p>\r\n\r\n\r\n                    <FormControl className={classes.inidcatorSection} component=\"fieldset\">\r\n                        <FormLabel component=\"legend\"> <Info/> Indicators</FormLabel>\r\n                        <FormGroup>\r\n\r\n\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Switch\r\n                                        checked={gasStatus}\r\n\r\n                                        value=\"Leaking\"\r\n                                    />\r\n                                }\r\n                                label=\"Gas Leaking \"\r\n                                labelPlacement=\"start\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Switch\r\n                                        checked={lightStatus}\r\n\r\n                                        value=\"Lit\"\r\n                                    />\r\n                                }\r\n                                label=\"Gas Lit \"\r\n                                labelPlacement=\"start\"\r\n                            />\r\n\r\n\r\n                        </FormGroup>\r\n                    </FormControl>\r\n\r\n                </Paper>\r\n            </Fragment>\r\n\r\n   \r\n        );\r\n    }\r\n}\r\n\r\nexport default  withStyles(styles)(CurrentStatus);\r\n","import axios from 'axios'\r\n\r\nconst SERVER = 'http://192.168.43.204:4000'\r\n\r\nexport function getStatus(id) {\r\n    return axios.get(SERVER + '/status/' + id, {params: {id: id}})\r\n}","import { connect } from 'react-redux'\r\nimport CurrentStatus from '../components/CurrentStatus/CurrentStatus'\r\nimport {statusDataFectched} from '../actions/status'\r\nimport {getStatus} from '../serverapi/'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ...state.status\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getStatus: id => {\r\n            getStatus(id).then(res => {\r\n                console.log(\"Status data fetched\")\r\n                dispatch(statusDataFectched(res.data))\r\n            }).catch(err => {\r\n                console.error(\"Status data fetched failed\")\r\n                console.error(err)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentStatus)","\r\n\r\nexport function statusDataFectched(data) {\r\n    return { type: \"STATUS_DATA_FETCHED\" , data: data }\r\n}","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport {Provider} from 'react-redux'\r\nimport {createStore} from 'redux'\r\nimport reducers from './reducers/'\r\nimport './App.css';\r\nimport StatusContainer from \"./containers/StatusContainer\";\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst store = createStore(reducers)\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: \"Montserrat\"\r\n    }\r\n});\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <MuiThemeProvider theme={theme}>\r\n            <Provider store={store}>\r\n                <div className=\"App\">\r\n                    <header className=\"App-header\">\r\n                        <StatusContainer/>\r\n                    </header>\r\n                </div>\r\n            </Provider>\r\n            </MuiThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}